{
	"version": "https://https://github.com/RedCMD/TmLanguage-Syntax-Highlighter",
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.syntax.json.tmLanguage",
	"name": "TextMate Language JSON",
	"fileTypes": [
		".tmLanguage.json"
	],
	"injections": {
		"R:source.syntax.json.tmLanguage - string - variable - comment - regex - meta.embedded": {
			"comment": "How to inject into everything that doesn't have a scope-name? without having to specify every single scope-name?",
			"patterns": [ { "include": "#invalid" } ]
		}
	},
	"patterns": [
		{ "include": "#json" }
	],
	"repository": {
		"json": {
			"comment": "{ ... }",
			"begin": "^\\s*{",
			"end": "}\\s*$",
			"patterns": [
				{
					"begin": "(?<={)|,",
					"end": "(?<=[]}\"]|true|false|null|\\d+)",
					"patterns": [
						{ "include": "#infoContributors"	},
						{ "include": "#version"				},
						{ "include": "#$schema"				},
						{ "include": "#scopeName"			},
						{ "include": "#name"				},
						{ "include": "#uuid"				},
						{ "include": "#fileTypes"			},
						{ "include": "#injections"			},
						{ "include": "#injectionSelector"	},
						{ "include": "#firstLineMatch"		},
						{ "include": "#foldingMarker"		},
						{ "include": "#patterns"			},
						{ "include": "#repository"			},
						{ "include": "#comment"				},
						{ "include": "#json-item"			}
					]
				}
			]
		},
		"infoContributors": {
			"comment": "\"information_for_contributors\": [ \"...\" ]",
			"begin": "\"(information_for_contributors)\"",
			"end": "(?<=])",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=])",
					"patterns": [
						{
							"begin": "\\[",
							"end": "]",
							"patterns": [
								{
									"begin": "(?<=\\[)",
									"end": "(?<=\")|(?=])",
									"patterns": [ { "include": "#string" } ]
								},
								{
									"begin": ",",
									"end": "(?<=\")",
									"patterns": [ { "include": "#string" } ]
								}
							]
						}
					]
				}
			]
		},
		"version": {
			"comment": "\"version\": \"...\"",
			"begin": "\"(version)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [ { "include": "#string" } ]
				}
			]
		},
		"$schema": {
			"comment": "\"$schem\": \"...\"",
			"begin": "\"(\\$)(schema)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": {
				"1": { "name": "keyword.tm" },
				"2": { "name": "support.function.tm" }
			},
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [ { "include": "#string" } ]
				}
			]
		},
		"scopeName": {
			"comment": "\"scopeName\": \"...\"",
			"begin": "\"(scopeName)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [
						{
							"match": "\"(text|source)?(.*?(?<!\\\\)\\\\{2}*|.*?)\"",
							"captures": {
								"1": { "name": "support.function.tm" },
								"2": {
									"patterns": [
										{ "match": "(?<!\\.|\")\\.(?!$)",	"name": "keyword.operator.tm"	},
										{ "match": "[\\w\\d-]+",			"name": "string.tm"				},
										{ "match": "\\\\[\"\\\\bfnrt]",		"name": "invalid.tm"			},
										{ "include": "#escape-characters"	}
									]
								}
							}
						}
					]
				}
			]
		},
		"name": {
			"comment": "\"name\": \"...\"",
			"begin": "\"(name)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [ { "include": "#string" } ]
				}
			]
		},
		"uuid": {
			"comment": "\"uuid\": \"00000000-0000-0000-0000-000000000000\"",
			"begin": "\"(uuid)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [
						{
							"match": "\"(?i:([a-z\\d]{1,8})(?:-(?:([a-z\\d]{1,4})(?:-(?:([a-z\\d]{1,4})(?:-(?:([a-z\\d]{1,4})(?:-(?:([a-z\\d]{1,12})?)?)?)?)?)?)?)?)?)?(.*?)\"",
							"captures": {
								"1": { "name": "constant.numeric.tm" },
								"2": { "name": "constant.numeric.tm" },
								"3": { "name": "constant.numeric.tm" },
								"4": { "name": "constant.numeric.tm" },
								"5": { "name": "constant.numeric.tm" },
								"6": {
									"patterns": [
										{ "match": "\\\\[\"\\\\bfnrt]",	"name": "invalid.tm" },
										{ "include": "#escape-characters" }
									]
								}
							}
						}
					]
				}
			]
		},
		"fileTypes": {
			"comment": "\"fileTypes\": [ \"...\" ]",
			"begin": "\"(fileTypes)\"",
			"end": "(?<=])",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=])",
					"patterns": [
						{
							"begin": "\\[",
							"end": "]",
							"patterns": [
								{
									"begin": "(?<=\\[)",
									"end": "(?<=\")|(?=])",
									"patterns": [ { "include": "#string" } ]
								},
								{
									"begin": ",",
									"end": "(?<=\")",
									"patterns": [ { "include": "#string" } ]
								}
							]
						}
					]
				}
			]
		},
		"injectionSelector": {
			"comment": "\"injectionSelector\": \"...\"",
			"begin": "\"(injectionSelector)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [
						{
							"match": "\"(.*?(?<!\\\\)\\\\{2}*|.*?)\"",
							"captures": { "1": { "patterns": [ { "include": "#injection-string" } ] } }
						}
					]
				}
			]
		},
		"injections": {
			"comment": "\"injections\": { ... }",
			"begin": "\"(injections)\"",
			"end": "(?<=})",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=})",
					"patterns": [
						{
							"begin": "{",
							"end": "}",
							"patterns": [
								{
									"begin": "(?<={)",
									"end": "(?<=})|(?=})",
									"patterns": [ { "include": "#injection" } ]
								},
								{
									"begin": ",",
									"end": "(?<=})",
									"patterns": [ { "include": "#injection" } ]
								}
							]
						}
					]
				}
			]
		},
		"injection": {
			"comment": "\"...\": { ... }",
			"begin": "\"(.*?(?<!\\\\)\\\\{2}*|.*?)\"",
			"end": "(?<=})",
			"beginCaptures": { "1": { "patterns": [ { "include": "#injection-string" } ] } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=})",
					"patterns": [
						{
							"begin": "{",
							"end": "}",
							"patterns": [
								{
									"begin": "(?<={)",
									"end": "(?<=[]\"])|(?=})",
									"patterns": [
										{ "include": "#patterns" },
										{ "include": "#comment" },
										{ "include": "#json-item" }
									]
								},
								{
									"begin": ",",
									"end": "(?<=[]\"])",
									"patterns": [
										{ "include": "#patterns" },
										{ "include": "#comment" },
										{ "include": "#json-item" }
									]
								}
							]
						}
					]
				}
			]
		},
		"injection-string": {
			"patterns": [
				{
					"match": "[LR]:",
					"name": "entity.name.function.tm"
				},
				{
					"match": "\\s+-\\s+",
					"name": "entity.name.function.tm"
				},
				{
					"match": "\\|",
					"name": "keyword.control.tm"
				},
				{ "match": "[(),]" },
				{
					"match": "[\\\\\\w*.-]+",
					"captures": { "0": {
						"patterns": [
							{ "match": "\\b(?<!\\.)(?>text|source)\\b", "name": "entity.name.function.tm" },
							{ "match": "\\*", "name": "entity.name.function.tm" },
							{ "include": "#scope-string" }
						]
					} }
				}
			]
		},
		"firstLineMatch": {
			"comment": "\"firstLineMatch\": \"...\"",
			"begin": "\"(firstLineMatch)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [
						{
							"begin": "\"",
							"end": "\"",
							"patterns": [ { "include": "source.syntax.regexp.tmLanguage" } ]
						}
					]
				}
			]
		},
		"foldingMarker": {
			"comment": "\"foldingStartMarker\": \"...\"",
			"begin": "\"(foldingSt(?:art|op)Marker)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [
						{
							"begin": "\"",
							"end": "\"",
							"patterns": [ { "include": "source.syntax.regexp.tmLanguage" } ]
						}
					]
				}
			]
		},
		"patterns": {
			"comment": "\"patterns\": [ ... ]",
			"begin": "\"(patterns)\"",
			"end": "(?<=])",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=])",
					"patterns": [
						{
							"begin": "\\[",
							"end": "]",
							"patterns": [
								{
									"begin": "(?<=\\[)",
									"end": "(?<=})|(?=])",
									"patterns": [ { "include": "#pattern-item" } ]
								},
								{
									"begin": ",",
									"end": "(?<=})",
									"patterns": [ { "include": "#pattern-item" } ]
								}
							]
						}
					]
				}
			]
		},
		"pattern-item": {
			"comment": "{ ... }",
			"begin": "{",
			"end": "}",
			"patterns": [
				{
					"begin": "(?<={)",
					"end": "(?!\\G)(?<=[]}\"]|true|false|null|\\d+)|(?=})",
					"patterns": [
						{ "include": "#name-scope"			},
						{ "include": "#match"				},
						{ "include": "#include"				},
						{ "include": "#patterns"			},
						{ "include": "#captures"			},
						{ "include": "#repository"			},
						{ "include": "#applyEndPatternLast"	},
						{ "include": "#comment"				},
						{ "include": "#json-item"			}
					]
				},
				{
					"begin": ",",
					"end": "(?!\\G)(?<=[]}\"]|true|false|null|\\d+)",
					"patterns": [
						{ "include": "#name-scope"			},
						{ "include": "#match"				},
						{ "include": "#include"				},
						{ "include": "#patterns"			},
						{ "include": "#captures"			},
						{ "include": "#repository"			},
						{ "include": "#applyEndPatternLast"	},
						{ "include": "#comment"				},
						{ "include": "#json-item"			}
					]
				}
			]
		},
		"repository": {
			"comment": "\"repository\": { ... }",
			"begin": "\"(repository)\"",
			"end": "(?<=})",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=})",
					"patterns": [
						{
							"begin": "{",
							"end": "}",
							"patterns": [
								{
									"begin": "(?<={)",
									"end": "(?<=})|(?=})",
									"patterns": [ { "include": "#repository-item" } ]
								},
								{
									"begin": ",",
									"end": "(?<=})",
									"patterns": [ { "include": "#repository-item" } ]
								},
								{ "include": "#comment" }
							]
						}
					]
				}
			]
		},
		"repository-item": {
			"comment": "\"...\": { ... }",
			"begin": "\"(.*?(?<!\\\\)\\\\{2}*|.*?)\"",
			"end": "(?<=})",
			"beginCaptures": {
				"1": {
					"name": "variable.regex.tm",
					"patterns": [ { "include": "#escape-characters" } ]
				}
			},
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=})",
					"patterns": [
						{
							"begin": "{",
							"end": "}",
							"patterns": [
								{
									"begin": "(?<={)",
									"end": "(?<=[]}\"]|true|false|null|\\d+)|(?=})",
									"patterns": [
										{ "include": "#name-scope"			},
										{ "include": "#match"				},
										{ "include": "#captures"			},
										{ "include": "#patterns"			},
										{ "include": "#repository"			},
										{ "include": "#applyEndPatternLast"	},
										{ "include": "#comment"				},
										{ "include": "#json-item"			}
									]
								},
								{
									"begin": ",",
									"end": "(?<=[]}\"]|true|false|null|\\d+)",
									"patterns": [
										{ "include": "#name-scope"			},
										{ "include": "#match"				},
										{ "include": "#captures"			},
										{ "include": "#patterns"			},
										{ "include": "#repository"			},
										{ "include": "#applyEndPatternLast"	},
										{ "include": "#comment"				},
										{ "include": "#json-item"			}
									]
								}
							]
						}
					]
				}
			]
		},
		"name-scope": {
			"comment": "\"name\": \"...\"",
			"begin": "\"((?>contentN|n)ame)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "\"(.*?(?<!\\\\)\\\\{2}*|.*)\"",
					"endCaptures": {
						"1": {
							"name": "$1 regex",
							"patterns": [
								{ "include": "#escape-characters" },
								{
									"match": "(\\$)(0*)(\\d{1,3})(?!\\d)",
									"captures": {
										"1": { "name": "meta.embedded constant.character.escape.tm markup.italic" },
										"2": { "name": "punctuation.definition.tag.tm" },
										"3": { "name": "constant.numeric.tm" }
									}
								},
								{
									"match": "(\\$)({)(0*)(\\d{1,3})(:/)(upcase|downcase)(})",
									"captures": {
										"1": { "name": "meta.embedded constant.character.escape.tm markup.italic" },
										"2": { "name": "meta.embedded constant.character.escape.tm" },
										"3": { "name": "punctuation.definition.tag.tm" },
										"4": { "name": "constant.numeric.tm" },
										"5": { "name": "constant.character.escape.tm" },
										"6": { "name": "markup.heading.tm" },
										"7": { "name": "meta.embedded constant.character.escape.tm" }
									}
								}
							]
						}
					},
					"patterns": [ { "include": "#invalid" } ]
				}
			]
		},
		"match": {
			"comment": "\"match\": \"...\"",
			"begin": "\"(match|begin|while|end)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [
						{
							"begin": "\"",
							"end": "\"",
							"contentName": "meta.embedded",
							"patterns": [ { "include": "source.syntax.regexp.tmLanguage" } ]
						}
					]
				}
			]
		},
		"include": {
			"comment": "\"include\": \"#...\"",
			"begin": "\"(include)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [
						{
							"match": "\"(?:((\\$)(base|self)|(text|source)?([^#\"]*)(#)?(.*?))(?<=[^\\\\]\\\\{2}*)|\\g<1>)\"",
							"captures": {
								"2": { "name": "keyword.tm" },
								"3": { "name": "entity.name.function.tm" },
								"4": { "name": "entity.name.function.tm" },
								"5": { "patterns": [ { "include": "#scope-string" } ] },
								"6": { "name": "keyword.tm" },
								"7": {
									"name": "variable.regex.tm",
									"patterns": [ { "include": "#escape-characters" } ]
								}
							}
						}
					]
				}
			]
		},
		"captures": {
			"comment": "\"captures\": { ... }",
			"begin": "\"((?:beginC|whileC|endC|c)aptures)\"",
			"end": "(?<=})",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=})",
					"patterns": [
						{
							"begin": "{",
							"end": "}",
							"patterns": [
								{
									"begin": "(?<={)",
									"end": "(?!\\G)(?<=[}\"])|(?=})",
									"patterns": [
										{ "include": "#capture-item" },
										{ "include": "#include"		 },
										{ "include": "#comment"		 },
										{ "include": "#json-item"	 }
									]
								},
								{
									"begin": ",",
									"end": "(?!\\G)(?<=[}\"])",
									"patterns": [
										{ "include": "#capture-item" },
										{ "include": "#include"		 },
										{ "include": "#comment"		 },
										{ "include": "#json-item"	 }
									]
								}
							]
						}
					]
				}
			]
		},
		"capture-item": {
			"comment": "\"1\": { ... }",
			"begin": "\"(\\d+)\"",
			"end": "(?<=})",
			"beginCaptures": { "1": { "name": "constant.numeric.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=})",
					"patterns": [
						{
							"begin": "{",
							"end": "}",
							"patterns": [
								{
									"begin": "(?<={)",
									"end": "(?!\\G)(?<=[]\"])|(?=})",
									"patterns": [
										{ "include": "#name-scope"	},
										{ "include": "#patterns"	},
										{ "include": "#comment"		},
										{ "include": "#json-item"	}
									]
								},
								{
									"begin": ",",
									"end": "(?!\\G)(?<=[]\"])",
									"patterns": [
										{ "include": "#name-scope"	},
										{ "include": "#patterns"	},
										{ "include": "#comment"		},
										{ "include": "#json-item"	}
									]
								}
							]
						}
					]
				}
			]
		},
		"applyEndPatternLast": {
			"comment": "\"applyEndPatternLast\": true",
			"begin": "\"(applyEndPatternLast)\"",
			"end": "(?!\\G)(?<=true|false|null|\\d+)",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=true|false|null|\\d+)",
					"patterns": [
						{
							"match": "true|false|null",
							"name": "keyword.control.tm"
						},
						{
							"match": "\\d+",
							"name": "constant.numeric.tmLanguage"
						}
					]
				}
			]
		},
		"comment": {
			"comment": "\"comment\": \"...\"",
			"begin": "\"(comment)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [
						{
							"match": "\"(.*?(?<!\\\\)\\\\{2}*|.*?)\"",
							"captures": {
								"1": {
									"name": "comment.tm",
									"patterns": [
										{
											"match": "(\\\\)/",
											"captures": { "1": { "name": "constant.character.escape.tm" } }
										},
										{ "include": "#escape-characters" }
									]
								}
							}
						}
					]
				}
			]
		},
		"scope-string": {
			"patterns": [
				{ "match": "(?<![\\s.\"])\\.(?=[^\\s#\"])",	"name": "keyword.operator.tm"	},
				{ "match": "[\\w\\d-]+",					"name": "string.tm"				},
				{ "match": "\\\\[\"\\\\bfnrt]",				"name": "invalid.tm"			},
				{ "include": "#escape-characters"	}
			]
		},
		"string": {
			"match": "\"(.*?(?<!\\\\)\\\\{2}*|.*?)\"",
			"captures": {
				"1": {
					"name": "string.tm",
					"patterns": [ { "include": "#escape-characters" } ]
				}
			}
		},
		"escape-characters": {
			"patterns": [
				{
					"match": "(\\\\)/",
					"captures": { "1": { "name": "punctuation.definition.tag.tm" } }
				},
				{
					"match": "(\\\\)[\\\\\"]",
					"captures": { "1": { "name": "constant.character.escape.tm" } }
				},
				{
					"match": "\\\\[bfnrt]",
					"name": "constant.character.escape.tm"
				},
				{
					"match": "(\\\\u)(.{4})",
					"captures": {
						"1": { "name": "constant.character.escape.tm" },
						"2": {
							"name": "constant.numeric.tm",
							"patterns": [ { "match": "\\H+", "name": "invalid.tm markup.underline" } ]
						}
					}
				},
				{
					"match": "\\\\.?|[\"\\x0-\\x1F\\x7F]",
					"name": "invalid.tm markup.underline regex"
				}
			]
		},
		"json-item": {
			"comment": "\"...\": ...",
			"begin": "\"(.*?(?<!\\\\)\\\\{2}*|.*)\"",
			"end": "(?!\\G)(?<=[]}\"]|true|false|null|\\d+)",
			"beginCaptures": {
				"0": { "name": "variable.tm" },
				"1": {
					"name": "variable.tm regex",
					"patterns": [
						{
							"match": "\\\\[\\\\\"]",
							"name": "constant.character.escape.tm"
						},
						{
							"match": "\\\\.?",
							"name": "invalid.tm markup.underline.tm"
						}
					]
				}
			},
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=[]}\"]|true|false|null|\\d+)",
					"patterns": [
						{ "include": "#json-dictionary" },
						{ "include": "#json-array" },
						{ "include": "#json-value" }
					]
				}
			]
		},
		"json-dictionary": {
			"comment": "{ ... }",
			"begin": "{",
			"end": "}",
			"patterns": [
				{
					"begin": "(?<={)",
					"end": "(?<=[]}\"]|true|false|null|\\d+)|(?=})",
					"patterns": [ { "include": "#json-item"	} ]
				},
				{
					"begin": ",",
					"end": "(?<=[]}\"]|true|false|null|\\d+)",
					"patterns": [ { "include": "#json-item"	} ]
				}
			]
		},
		"json-array": {
			"comment": "[ ... ]",
			"begin": "\\[",
			"end": "]",
			"patterns": [
				{
					"begin": "(?<=\\[)",
					"end": "(?<=[]}\"]|true|false|null|\\d+)|(?=])",
					"patterns": [
						{ "include": "#json-dictionary"	},
						{ "include": "#json-array"		},
						{ "include": "#json-value"		}
					]
				},
				{
					"begin": ",",
					"end": "(?<=[]}\"]|true|false|null|\\d+)",
					"patterns": [
						{ "include": "#json-dictionary"	},
						{ "include": "#json-array"		},
						{ "include": "#json-value"		}
					]
				}
			]
		},
		"json-value": {
			"patterns": [
				{
					"comment": "\"...\"",
					"match": "\"(?:.*?(?<!\\\\)\\\\{2}*|.*?)\"",
					"captures": {
						"0": {
							"name": "string.tm",
							"patterns": [
								{
									"match": "\\\\[\"\\\\/bfnrt]",
									"name": "constant.character.escape.tm"
								},
								{
									"match": "\\\\u\\h{4}",
									"name": "constant.character.escape.tm"
								},
								{
									"match": "\\\\.",
									"name": "invalid.tm"
								}
							]
						}
					}
				},
				{
					"match": "true|false|null",
					"name": "keyword.control.tm"
				},
				{
					"match": "-?\\d+",
					"name": "constant.numeric.tm"
				}
			]
		},
		"invalid": {
			"patterns": [
				{
					"comment": "C styled comments are not allowed: //  /* */ ",
					"match": "/[/*].*",
					"name": "invalid.tm markup.underline regex"
				},
				{
					"match": "\\S[^\\s\"\\[\\]{}:,]*",
					"name": "invalid.tm regex"
				}
			]
		}
	}
}