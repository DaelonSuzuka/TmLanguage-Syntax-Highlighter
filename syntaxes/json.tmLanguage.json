{
	"version": "https://github.com/RedCMD/TmLanguage-Syntax-Highlighter",
	"$schema": "https://raw.githubusercontent.com/RedCMD/TmLanguage-Syntax-Highlighter/main/vscode.tmLanguage.schema.json",
	"scopeName": "source.syntax.json.tmLanguage",
	"name": "TextMate Language JSON",
	"fileTypes": [ ".tmLanguage.json" ],
	"firstLineMatch": "^\\s*{",
	"injections": {
		"R:source.syntax.json.tmLanguage -string -variable -punctuation -comment -regex -meta.embedded": { "patterns": [ { "include": "#invalid" } ] },
		"L:capture-group-lookbehind -character-class -comment": {
			"patterns": [
				{ "include": "source.syntax.regexp.tmLanguage#capture-group-lookbehind-invalid" },
				{ "include": "source.syntax.regexp.tmLanguage#absent-invalid" }
			]
		},
		"L:capture-group-lookbehind-extended -character-class -comment": {
			"patterns": [
				{ "include": "source.syntax.regexp.tmLanguage#capture-group-lookbehind-invalid-extended" },
				{ "include": "source.syntax.regexp.tmLanguage#absent-invalid-extended" }
			]
		},
		"L:capture-group-negative-lookbehind -character-class -comment": {
			"patterns": [
				{ "include": "source.syntax.regexp.tmLanguage#capture-group-negative-lookbehind-invalid" },
				{ "include": "source.syntax.regexp.tmLanguage#absent-invalid" }
			]
		},
		"L:capture-group-negative-lookbehind-extended -character-class -comment": {
			"patterns": [
				{ "include": "source.syntax.regexp.tmLanguage#capture-group-negative-lookbehind-invalid-extended" },
				{ "include": "source.syntax.regexp.tmLanguage#absent-invalid-extended" }
			]
		}
	},
	"patterns": [
		{ "include": "#json" },
		{ "comment": "Only really need #json.  But the rest acts as a fall back" },
		{ "include": "#scopeName" },
		{ "include": "#name" },
		{ "include": "#match" },
		{ "include": "#capture-item" },
		{ "include": "#captures" },
		{ "include": "#include" },
		{ "include": "#fileTypes" },
		{ "include": "#injections" },
		{ "include": "#injectionSelector" },
		{ "include": "#firstLineMatch" },
		{ "include": "#patterns" },
		{ "include": "#repository" },
		{ "include": "#comment" },
		{ "include": "#repository-item" },
		{ "include": "#json-item" },
		{ "match": "," },
		{
			"begin": "{",
			"end": "}",
			"patterns": [ { "include": "$self" } ]
		}
	],
	"repository": {
		"json": {
			"comment": "{ ... }",
			"begin": "^\\s*{",
			"end": "}\\s*$",
			"patterns": [
				{
					"begin": "(?<={)|,",
					"end": "(?<=[]}\"]|true|false|null|\\d+)",
					"patterns": [
						{ "include": "#scopeName" },
						{ "include": "#name-display" },
						{ "include": "#fileTypes" },
						{ "include": "#injections" },
						{ "include": "#injectionSelector" },
						{ "include": "#firstLineMatch" },
						{ "include": "#patterns" },
						{ "include": "#repository" },
						{ "include": "#comment" },
						{ "include": "#json-item" }
					]
				}
			]
		},
		"scopeName": {
			"comment": "\"scopeName\": \"...\"",
			"begin": "\"(scopeName)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [
						{
							"begin": "\"",
							"end": "\"",
							"contentName": "regex",
							"patterns": [
								{
									"match": "\\G(?>text|source)\\b",
									"name": "support.function.tm"
								},
								{
									"match": "(?<!\\.|\")\\.(?!$)",
									"name": "support.function.tm"
								},
								{
									"match": "[\\w-]+",
									"name": "string.tm"
								},
								{
									"match": "\\\\[\"\\\\/bfnrtu]",
									"name": "invalid.illegal.tm"
								},
								{ "include": "#escape-characters" }
							]
						}
					]
				}
			]
		},
		"name-display": {
			"comment": "\"name\": \"...\"",
			"comment": "Vscode's TextMate acknowledges \"name\" but doesn't do anything with it",
			"begin": "\"(name)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [ { "include": "#string" } ]
				}
			]
		},
		"fileTypes": {
			"comment": "\"fileTypes\": [ \"...\" ]",
			"comment": "Vscode's TextMate acknowledges \"fileTypes\" but doesn't do anything with it",
			"begin": "\"(fileTypes)\"",
			"end": "(?<=])",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=])",
					"patterns": [
						{
							"comment": "TODO: Disallow invalid filename characters.  \\/:*?\"<>|  Windows? Linux??",
							"begin": "\\[",
							"end": "]",
							"patterns": [
								{
									"begin": "(?<=\\[)",
									"end": "(?<=\")|(?=])",
									"patterns": [ { "include": "#string" } ]
								},
								{
									"begin": ",",
									"end": "(?<=\")",
									"patterns": [ { "include": "#string" } ]
								}
							]
						}
					]
				}
			]
		},
		"injectionSelector": {
			"comment": "\"injectionSelector\": \"...\"",
			"begin": "\"(injectionSelector)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [
						{
							"begin": "\"",
							"end": "\"",
							"patterns": [ { "include": "#injection-string" } ]
						}
					]
				}
			]
		},
		"injections": {
			"comment": "\"injections\": { ... }",
			"begin": "\"(injections)\"",
			"end": "(?<=})",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=})",
					"patterns": [
						{
							"begin": "{",
							"end": "}",
							"patterns": [
								{
									"begin": "(?<={)",
									"end": "(?<=})|(?=})",
									"patterns": [ { "include": "#injection" } ]
								},
								{
									"begin": ",",
									"end": "(?<=})",
									"patterns": [ { "include": "#injection" } ]
								}
							]
						}
					]
				}
			]
		},
		"injection": {
			"comment": "\"...\": { ... }",
			"begin": "\"",
			"end": "(?<=})",
			"patterns": [
				{
					"begin": "\\G",
					"end": "\"",
					"contentName": "meta.embedded.block.regexp.tmLanguage",
					"patterns": [ { "include": "#injection-string" } ]
				},
				{
					"begin": ":",
					"end": "(?<=})",
					"patterns": [
						{
							"begin": "{",
							"end": "}",
							"patterns": [
								{
									"begin": "(?<={)",
									"end": "(?<=[]\"])|(?=})",
									"patterns": [
										{ "include": "#patterns" },
										{ "include": "#comment" },
										{ "include": "#json-item" }
									]
								},
								{
									"begin": ",",
									"end": "(?<=[]\"])",
									"patterns": [
										{ "include": "#patterns" },
										{ "include": "#comment" },
										{ "include": "#json-item" }
									]
								}
							]
						}
					]
				}
			]
		},
		"injection-string": {
			"comment": "All non-functional characters are treated as whitespace.  This includes whitespace ` ` and asterisk `*`.  [^\\w.,:|()-]",
			"patterns": [
				{
					"match": "\\\\[\\\\\"/bfnrt]",
					"name": "punctuation.definition.tag.tm"
				},
				{ "include": "#escape-characters" },
				{
					"begin": "[)|]",
					"end": "(?=\")",
					"name": "punctuation.definition.tag.tm regex"
				},
				{
					"match": "(?<=\"\\G|,)((?>\\\\[\\\\\"/bfnrt]|[^\\\\\"\\w.:|()-])*)(?>([LR]:)|([\\w.:]:))",
					"captures": {
						"1": { "name": "punctuation.definition.tag.tm regex" },
						"2": { "name": "support.function.tm" },
						"3": { "name": "invalid.illegal.tm" }
					}
				},
				{
					"match": "(text|source)(\\.[\\w.:]+)",
					"captures": {
						"1": { "name": "support.function.tm" },
						"2": {
							"name": "string",
							"patterns": [
								{
									"match": "\\.",
									"name": "support.function.tm"
								}
							]
						}
					}
				},
				{
					"match": "[\\w.:][\\w.:-]*",
					"captures": { "0": { "name": "string $0" } }
				},
				{
					"begin": "\\(",
					"end": "\\)|(?=\")",
					"captures": { "0": { "name": "constant.character.set.regexp.tm" } },
					"patterns": [
						{
							"match": "(?<=[,|])(?>\\\\[\\\\\"/bfnrt]|[^\\\\\\w.:()-])+",
							"name": "punctuation.definition.tag.tm regex"
						},
						{
							"match": "\\|",
							"name": "keyword.control.tm"
						},
						{ "include": "#injection-string" }
					]
				},
				{
					"match": "(?>\\\\[\\\\\"/bfnrt]|[^\\\\\"\\w.:,|()-])+",
					"name": "punctuation.definition.tag.tm regex"
				},
				{
					"match": "(?<=,)(?>\\\\[\\\\\"/bfnrt]|[^\\\\\"\\w.:|()-])+",
					"name": "punctuation.definition.tag.tm regex"
				},
				{
					"match": ",",
					"name": "keyword.control.tm"
				},
				{
					"match": "-(?>\\\\[\\\\\"/bfnrt]|[^\\\\\"\\w.:|()-])*-",
					"name": "punctuation.definition.tag.tm regex"
				},
				{
					"match": "-",
					"name": "support.function.tm"
				}
			]
		},
		"firstLineMatch": {
			"comment": "\"firstLineMatch\": \"...\"",
			"comment": "Vscode's TextMate acknowledges \"firstLineMatch\" but doesn't do anything with it",
			"begin": "\"(firstLineMatch)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [
						{
							"begin": "\"",
							"end": "\"",
							"contentName": "meta.embedded.block.regexp.tmLanguage",
							"patterns": [ { "include": "source.syntax.regexp.tmLanguage" } ]
						}
					]
				}
			]
		},
		"patterns": {
			"comment": "\"patterns\": [ ... ]",
			"begin": "\"(patterns)\"",
			"end": "(?<=])",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=])",
					"patterns": [
						{
							"begin": "\\[",
							"end": "]",
							"patterns": [
								{
									"begin": "(?<=\\[)",
									"end": "(?<=})|(?=])",
									"patterns": [ { "include": "#pattern-item" } ]
								},
								{
									"begin": ",",
									"end": "(?<=})",
									"patterns": [ { "include": "#pattern-item" } ]
								}
							]
						}
					]
				}
			]
		},
		"pattern-item": {
			"comment": "{ ... }",
			"begin": "{",
			"end": "}",
			"patterns": [
				{
					"begin": "(?<={)",
					"end": "(?!\\G)(?<=[]}\"]|true|false|null|\\d+)|(?=})",
					"patterns": [
						{ "include": "#name" },
						{ "include": "#match" },
						{ "include": "#include" },
						{ "include": "#patterns" },
						{ "include": "#captures" },
						{ "include": "#repository" },
						{ "include": "#applyEndPatternLast" },
						{ "include": "#comment" },
						{ "include": "#json-item" }
					]
				},
				{
					"begin": ",",
					"end": "(?!\\G)(?<=[]}\"]|true|false|null|\\d+)",
					"patterns": [
						{ "include": "#name" },
						{ "include": "#match" },
						{ "include": "#include" },
						{ "include": "#patterns" },
						{ "include": "#captures" },
						{ "include": "#repository" },
						{ "include": "#applyEndPatternLast" },
						{ "include": "#comment" },
						{ "include": "#json-item" }
					]
				}
			]
		},
		"repository": {
			"comment": "\"repository\": { ... }",
			"begin": "\"(repository)\"",
			"end": "(?<=})",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=})",
					"patterns": [
						{
							"begin": "{",
							"end": "}",
							"patterns": [
								{
									"begin": "(?<={)",
									"end": "(?<=})|(?=})",
									"patterns": [ { "include": "#repository-item" } ]
								},
								{
									"begin": ",",
									"end": "(?<=})",
									"patterns": [ { "include": "#repository-item" } ]
								},
								{ "include": "#comment" }
							]
						}
					]
				}
			]
		},
		"repository-item": {
			"comment": "\"...\": { ... }",
			"begin": "\"",
			"end": "(?<=})",
			"beginCaptures": { "0": { "name": "variable.tm" } },
			"patterns": [
				{
					"begin": "\\G",
					"end": "\"",
					"endCaptures": { "0": { "name": "variable.tm" } },
					"contentName": "variable.tm regex",
					"patterns": [
						{
							"match": "\\G\\$(?>self|base)(?=\")",
							"name": "markup.strikethrough.tm"
						},
						{ "include": "#escape-characters" }
					]
				},
				{
					"begin": ":",
					"end": "(?<=})",
					"patterns": [
						{
							"begin": "{",
							"end": "}",
							"patterns": [
								{
									"begin": "(?<={)",
									"end": "(?<=[]}\"]|true|false|null|\\d+)|(?=})",
									"patterns": [
										{ "include": "#name" },
										{ "include": "#match" },
										{ "include": "#captures" },
										{ "include": "#patterns" },
										{ "include": "#repository" },
										{ "include": "#applyEndPatternLast" },
										{ "include": "#comment" },
										{ "include": "#json-item" }
									]
								},
								{
									"begin": ",",
									"end": "(?<=[]}\"]|true|false|null|\\d+)",
									"patterns": [
										{ "include": "#name" },
										{ "include": "#match" },
										{ "include": "#captures" },
										{ "include": "#patterns" },
										{ "include": "#repository" },
										{ "include": "#applyEndPatternLast" },
										{ "include": "#comment" },
										{ "include": "#json-item" }
									]
								}
							]
						}
					]
				}
			]
		},
		"name": {
			"comment": "\"name\": \"...\"",
			"begin": "\"((?>contentN|n)ame)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"comment": "\"(.*?(?<!\\\\)\\\\{2}*|.*)\"",
					"end": "\"((?>[^\"\\\\]++|\\\\.)*\\\\?)\"",
					"endCaptures": {
						"0": { "name": "$1" },
						"1": {
							"comment": "The replacment format string $1 Removes leading dot's from captured text:  ..te.xt..  =>  te.xt..  ",
							"name": "$1 regex",
							"patterns": [
								{ "include": "#escape-characters" },
								{
									"match": "(?<=\\s|\")(?<!\\\\\")(?>text|source)\\.\\S+",
									"captures": { "0": { "patterns": [ { "include": "#scope-string" } ] } }
								},
								{
									"match": "(?>comment|string|regex|meta\\.embedded)\\b",
									"name": "markup.italic"
								},
								{ "match": "\\w+" },
								{
									"comment": "An invalid capture group number does not convert, nor becomes null",
									"match": "(\\$)(0*)(\\d{1,3})(?!\\d)",
									"captures": {
										"1": { "name": "meta.embedded constant.character.escape.tm markup.italic" },
										"2": { "name": "punctuation.definition.tag.tm" },
										"3": { "name": "constant.numeric.tm" }
									}
								},
								{
									"match": "(\\$)({)(0*)(\\d{1,3})(:/)(upcase|downcase)(})",
									"captures": {
										"1": { "name": "meta.embedded constant.character.escape.tm markup.italic" },
										"2": { "name": "meta.embedded constant.character.escape.tm" },
										"3": { "name": "punctuation.definition.tag.tm" },
										"4": { "name": "constant.numeric.tm" },
										"5": { "name": "constant.character.escape.tm" },
										"6": { "name": "markup.heading.tm" },
										"7": { "name": "meta.embedded constant.character.escape.tm" }
									}
								}
							]
						}
					}
				}
			]
		},
		"match": {
			"comment": "\"match\": \"...\"",
			"begin": "\"(match|begin|while|end)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [
						{
							"begin": "\"",
							"end": "\"",
							"contentName": "meta.embedded.block.regexp.tmLanguage",
							"patterns": [ { "include": "source.syntax.regexp.tmLanguage" } ]
						}
					]
				}
			]
		},
		"include": {
			"comment": "\"include\": \"#...\"",
			"begin": "\"(include)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [
						{
							"match": "\"((#?)\\$)(base|self)\"",
							"captures": {
								"1": { "name": "keyword.tm" },
								"2": { "name": "markup.strikethrough.tm" },
								"3": { "name": "support.function.tm" }
							}
						},
						{
							"begin": "\"",
							"end": "\"",
							"contentName": "regex",
							"patterns": [
								{
									"begin": "#",
									"end": "(?=\")",
									"beginCaptures": { "0": { "name": "keyword.tm" } },
									"contentName": "variable.tm",
									"patterns": [ { "include": "#escape-characters" } ]
								},
								{ "patterns": [ { "include": "#scope-string" } ] }
							]
						}
					]
				}
			]
		},
		"captures": {
			"comment": "\"captures\": { ... }",
			"begin": "\"((?:beginC|whileC|endC|c)aptures)\"",
			"end": "(?<=})",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=})",
					"patterns": [
						{
							"begin": "{",
							"end": "}",
							"patterns": [
								{
									"begin": "(?<={)",
									"end": "(?!\\G)(?<=[}\"])|(?=})",
									"patterns": [
										{ "include": "#capture-item" },
										{ "include": "#include" },
										{ "include": "#comment" },
										{ "include": "#json-item" }
									]
								},
								{
									"begin": ",",
									"end": "(?!\\G)(?<=[}\"])",
									"patterns": [
										{ "include": "#capture-item" },
										{ "include": "#include" },
										{ "include": "#comment" },
										{ "include": "#json-item" }
									]
								}
							]
						}
					]
				}
			]
		},
		"capture-item": {
			"comment": "\"1\": { ... }",
			"begin": "\"(\\d+)(.*?(?<!\\\\)\\\\{2}*|.*)\"",
			"end": "(?<=})",
			"beginCaptures": {
				"1": { "name": "constant.numeric.tm" },
				"2Every char after the numeric is ignored. 0-9": {
					"name": "punctuation.definition.tag.tm regex"
				}
			},
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=})",
					"patterns": [
						{
							"begin": "{",
							"end": "}",
							"patterns": [
								{
									"begin": "(?<={)",
									"end": "(?!\\G)(?<=[]\"])|(?=})",
									"patterns": [
										{ "include": "#name" },
										{ "include": "#patterns" },
										{ "include": "#comment" },
										{ "include": "#json-item" }
									]
								},
								{
									"begin": ",",
									"end": "(?!\\G)(?<=[]\"])",
									"patterns": [
										{ "include": "#name" },
										{ "include": "#patterns" },
										{ "include": "#comment" },
										{ "include": "#json-item" }
									]
								}
							]
						}
					]
				}
			]
		},
		"applyEndPatternLast": {
			"comment": "\"applyEndPatternLast\": true",
			"comment": "0, false and null disable \"applyEndPatternLast\". true and numbers != 0 enable it (including negatives). Everything else is an error (including +1)",
			"begin": "\"(applyEndPatternLast)\"",
			"end": "(?!\\G)(?<=true|false|null|\\d+)",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=true|false|null|\\d+)",
					"patterns": [
						{
							"match": "true|false|null",
							"name": "keyword.control.tm"
						},
						{
							"match": "-?\\d+",
							"name": "constant.numeric.tmLanguage"
						}
					]
				}
			]
		},
		"comment": {
			"comment": "\"comment\": \"...\"",
			"comment": "Vscode's TextMate does NOT acknowledge \"comment\" but instead just ignores it like all other unsupported keys",
			"begin": "\"(comment)\"",
			"end": "(?!\\G)(?<=\")",
			"beginCaptures": { "1": { "name": "keyword.tm" } },
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=\")",
					"patterns": [
						{
							"begin": "\"",
							"end": "\"",
							"name": "comment.tm",
							"patterns": [
								{
									"match": "(\\\\)/",
									"captures": { "1": { "name": "constant.character.escape.tm" } }
								},
								{ "include": "#escape-characters" }
							]
						},
						{
							"name": "comment.tm",
							"captures": {
								"1": {
									"patterns": [
										{
											"match": "(\\\\)/",
											"captures": { "1": { "name": "constant.character.escape.tm" } }
										},
										{ "include": "#escape-characters" }
									]
								}
							}
						}
					]
				}
			]
		},
		"scope-string": {
			"patterns": [
				{
					"match": "(?<=\\s|\"|\\b[LR]:)(?>source|text)\\.(?=[^\\s\"#])",
					"name": "support.function.tm"
				},
				{
					"match": "(?<![\\s\".])\\.(?=[^\\s\"#])",
					"name": "support.function.tm"
				},
				{
					"match": "[\\w:][\\w:-]*",
					"name": "string"
				},
				{
					"match": "\\\\[\"\\\\bfnrt]",
					"name": "invalid.illegal.tm"
				},
				{ "include": "#escape-characters" }
			]
		},
		"string": {
			"begin": "\"",
			"end": "\"",
			"name": "string.tm",
			"patterns": [ { "include": "#escape-characters" } ]
		},
		"escape-characters": {
			"patterns": [
				{
					"match": "(\\\\)/",
					"captures": { "1": { "name": "punctuation.definition.tag.tm" } }
				},
				{
					"match": "(\\\\)[\\\\\"]",
					"captures": { "1": { "name": "constant.character.escape.tm" } }
				},
				{
					"match": "\\\\[bfnrt]",
					"name": "constant.character.escape.tm"
				},
				{
					"match": "(\\\\u)(.{4})",
					"captures": {
						"1": { "name": "constant.character.escape.tm" },
						"2": {
							"name": "constant.numeric.tm",
							"patterns": [
								{
									"match": "\\H+",
									"name": "invalid.illegal.tm markup.underline"
								}
							]
						}
					}
				},
				{
					"match": "\\\\.?|[\"[:cntrl:]]",
					"name": "invalid.illegal.tm markup.underline regex"
				}
			]
		},
		"json-item": {
			"comment": "\"...\": ...",
			"begin": "\"(.*?(?<!\\\\)\\\\{2}*|.*)\"",
			"end": "(?!\\G)(?<=[]}\"]|true|false|null|\\d+)",
			"beginCaptures": {
				"0": { "name": "variable.tm" },
				"1": {
					"name": "variable.tm regex",
					"patterns": [
						{
							"match": "\\\\[\\\\\"]",
							"name": "constant.character.escape.tm"
						},
						{
							"match": "\\\\.?",
							"name": "invalid.illegal.tm markup.underline"
						}
					]
				}
			},
			"patterns": [
				{
					"begin": ":",
					"end": "(?<=[]}\"]|true|false|null|\\d+)",
					"patterns": [
						{ "include": "#json-dictionary" },
						{ "include": "#json-array" },
						{ "include": "#json-value" }
					]
				}
			]
		},
		"json-dictionary": {
			"comment": "{ ... }",
			"begin": "{",
			"end": "}",
			"patterns": [
				{
					"begin": "(?<={)",
					"end": "(?<=[]}\"]|true|false|null|\\d+)|(?=})",
					"patterns": [ { "include": "#json-item" } ]
				},
				{
					"begin": ",",
					"end": "(?<=[]}\"]|true|false|null|\\d+)",
					"patterns": [ { "include": "#json-item" } ]
				}
			]
		},
		"json-array": {
			"comment": "[ ... ]",
			"begin": "\\[",
			"end": "]",
			"patterns": [
				{
					"begin": "(?<=\\[)",
					"end": "(?<=[]}\"]|true|false|null|\\d+)|(?=])",
					"patterns": [
						{ "include": "#json-dictionary" },
						{ "include": "#json-array" },
						{ "include": "#json-value" }
					]
				},
				{
					"begin": ",",
					"end": "(?<=[]}\"]|true|false|null|\\d+)",
					"patterns": [
						{ "include": "#json-dictionary" },
						{ "include": "#json-array" },
						{ "include": "#json-value" }
					]
				}
			]
		},
		"json-value": {
			"patterns": [
				{
					"comment": "\"...\"",
					"match": "\"(.*?(?<!\\\\)\\\\{2}*|.*)\"",
					"name": "string.tm",
					"captures": {
						"1": {
							"name": "string.tm",
							"patterns": [
								{
									"match": "\\\\[\"\\\\/bfnrt]",
									"name": "constant.character.escape.tm"
								},
								{
									"match": "\\\\u\\h{4}",
									"name": "constant.character.escape.tm"
								},
								{
									"match": "\\\\.?",
									"name": "invalid.illegal.tm"
								}
							]
						}
					}
				},
				{
					"match": "true|false|null",
					"name": "keyword.control.tm"
				},
				{
					"match": "-?\\d+",
					"name": "constant.numeric.tm"
				}
			]
		},
		"invalid": {
			"patterns": [
				{
					"comment": "C styled comments are not allowed: //  /* */ ",
					"match": "//.*|/\\*.*?\\*/",
					"name": "invalid.illegal.tm markup.underline regex"
				},
				{
					"comment": "Helps with error handling, by consuming all brackets inside strings",
					"match": "\"(?>\\\\.|[^\\\\\"]+)*\"",
					"name": "invalid.illegal.tm regex"
				},
				{
					"match": "\\S[^\\s\"\\[\\]{}:,]*",
					"name": "invalid.illegal.tm regex"
				}
			]
		}
	}
}