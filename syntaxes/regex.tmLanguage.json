{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.syntax.regex.tmLanguage",
	"name": "TextMate Language Regex",
	"patterns": [
		{ "include": "#character-type"						},
		{ "include": "#character-any"						},
		{ "include": "#characters"							},
		{ "include": "#anchor"								},
		{ "include": "#subroutine"							},
		{ "include": "#backreference"						},
		{ "include": "#unicode"								},
		{ "include": "#alternation"							},
		{ "include": "#quantifier"							},
		{ "include": "#character-class"						},
		{ "include": "#non-capture-group"					},
		{ "include": "#non-capture-group-modify"			},
		{ "include": "#non-capture-group-modify-extended"	},
		{ "include": "#capture-group-modify"				},
		{ "include": "#capture-group-modify-extended"		},
		{ "include": "#capture-group-conditional"			},
		{ "include": "#capture-group-lookbehind"			},
		{ "include": "#capture-group-lookahead"				},
		{ "include": "#capture-group-comment"				},
		{ "include": "#capture-group-name"					},
		{ "include": "#capture-group"						},
		{ "include": "#escape-character"					},
		{ "include": "#invalid"								},
		{ "include": "#regex"								}
	],
	"repository": {
		"$self-extended": {
			"patterns": [
				{ "include": "#comment-extended"					},
				{ "include": "#escape-character-extended"			},
				{ "include": "#non-capture-group-modify-extended"	},
				{ "include": "#non-capture-group-modify"			},
				{ "include": "#non-capture-group-extended"			},
				{ "include": "#capture-group-comment"				},
				{ "include": "#capture-group-modify-extended"		},
				{ "include": "#capture-group-modify"				},
				{ "include": "#capture-group-conditional-extended"	},
				{ "include": "#capture-group-lookbehind-extended"	},
				{ "include": "#capture-group-lookahead-extended"	},
				{ "include": "#capture-group-name-extended"			},
				{ "include": "#capture-group-extended"				},
				{ "include": "$self"								}
			]
		},
		"comment-extended": {
			"comment": "#...\n",
			"match": "(?x)#comment\n (\\#)(.*?(?<!\\\\)\\\\{2}*|.*?)(\\\\n|(?=\")|$)|(\\ )",
			"captures": {
				"1": { "name": "support.function.tmlanguage" },
				"2": {
					"name": "comment.tmlanguage",
					"patterns": [ { "include": "source.syntax.json.tmLanguage#escape-characters" } ]
				},
				"3": { "name": "constant.character.escape.tmlanguage" },
				"4": { "name": "comment.tmlanguage" }
			}
		},
		"escape-character": {
			"comment": "\\[ \\{ \\} \\( \\) \\$ \\? \\| \\^ \\* \\+ \\. \\\\ \" \b \f \n \r \t",
			"patterns": [
				{
					"match": "(\\\\{3})(\\\\)",
					"captures": {
						"1": { "name": "constant.character.escape.tmlanguage" },
						"2": { "name": "entity.name.label.tmlanguage strong.tmlanguage" }
					}
				},
				{
					"comment": "note to self. DO NOT use optional quantifiers in look behinds. It WILL tank performance. (?<={\\d*)",
					"comment1": "seems to only be when it tries to match something, then match something else afterwards that is optional between 0 and infinity; being *, {,9999} and (.+)? (?<=pq*)",
					"match1": "(?<={\\d*)\\\\{2}(?=,\\d*})",
					"name1": "constant.character.escape.tmlanguage"
				},
				{
					"match": "(\\\\{2})?({(?>\\d+)?)(?>((?(<1>)(\\\\{2})|(\\\\{2})))?(,))?((?(<3>)\\d*|\\d+))(?(<4>)(\\\\{2})|\\g<4>)?(})",
					"captures": {
						"1": { "name": "constant.character.escape.tmlanguage"					},
						"2": { "name": "entity.name.label.tmlanguage strong.string.tmlanguage"	},
						"3": { "name": "punctuation.definition.tag.tmlanguage"					},
						"5": { "name": "constant.character.escape.tmlanguage"					},
						"6": { "name": "entity.name.label.tmlanguage strong.tmlanguage"			},
						"7": { "name": "entity.name.label.tmlanguage strong.tmlanguage"			},
						"8": { "name": "punctuation.definition.tag.tmlanguage"					},
						"9": { "name": "entity.name.label.tmlanguage strong.string.tmlanguage"	}
					}
				},
				{
					"match": "(\\\\{2})([\\[()$?|^*+.])",
					"captures": {
						"1": { "name": "constant.character.escape.tmlanguage" },
						"2": { "name": "entity.name.label.tmlanguage strong.string.tmlanguage" }
					}
				},
				{
					"match": "\\\\(\\\\|(?=/))",
					"name": "punctuation.definition.tag.tmlanguage"
				},
				{
					"match": "\\\\\"",
					"name": "string.tmlanguage"
				},
				{
					"match": "\\\\[bfnrt]",
					"name": "constant.character.escape.tmlanguage"
				}
			]
		},
		"escape-character-extended": {
			"comment": "\\# \\ ",
			"match": "(\\\\{2})(#| )",
			"captures": {
				"1": { "name": "constant.character.escape.tmlanguage" },
				"2": { "name": "entity.name.label.tmlanguage strong.tmlanguage" }
			}
		},
		"capture-group": {
			"comment": "( ... )",
			"begin": "\\(",
			"end": "\\)",
			"captures": {
				"0": { "name": "meta.embedded.tmlanguage strong.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "$self" } ]
		},
		"capture-group-extended": {
			"comment": "( ... )",
			"begin": "\\(",
			"end": "\\)",
			"captures": {
				"0": { "name": "meta.embedded.tmlanguage strong.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"non-capture-group": {
			"comment": "(?:...) (?>...)",
			"begin": "(\\()(\\?[:>])",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.string.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "$self" } ]
		},
		"non-capture-group-extended": {
			"comment": "(?:...) (?>...)",
			"begin": "(\\()(\\?[:>])",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.string.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"capture-group-lookahead": {
			"comment": "(?=...) (?!...)",
			"begin": "(\\()(\\?[!=])",
			"end": "(\\))([+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage markup.italic.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" }
			},
			"endCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage markup.italic.tmlanguage" },
				"2": { "name": "invalid.tmlanguage markup.underline.tmlanguage" }
			},
			"patterns": [ { "include": "$self" } ]
		},
		"capture-group-lookahead-extended": {
			"comment": "(?=...) (?!...)",
			"begin": "(\\()(\\?[!=])",
			"end": "(\\))([+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage markup.italic.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" }
			},
			"endCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage markup.italic.tmlanguage" },
				"2": { "name": "invalid.tmlanguage markup.underline.tmlanguage" }
			},
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"capture-group-lookbehind": {
			"comment": "(?<=...) (?<!...)",
			"begin": "(\\()(\\?<[!=])",
			"end": "(\\))([+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage markup.italic.tmlanguage" },
				"2": { "name": "support.function.string.tmlanguage" }
			},
			"endCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage markup.italic.tmlanguage" },
				"2": { "name": "invalid.tmlanguage markup.underline.tmlanguage" }
			},
			"patterns": [
				{ "include": "#capture-group-lookaround-invalid" },
				{ "include": "$self" }
			]
		},
		"capture-group-lookbehind-extended": {
			"comment": "(?<=...) (?<!...)",
			"begin": "(\\()(\\?<[!=])",
			"end": "(\\))([+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage markup.italic.tmlanguage" },
				"2": { "name": "support.function.string.tmlanguage" }
			},
			"endCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage markup.italic.tmlanguage" },
				"2": { "name": "invalid.tmlanguage markup.underline.tmlanguage" }
			},
			"patterns": [
				{ "include": "#capture-group-lookaround-invalid-extended" },
				{ "include": "#$self-extended" }
			]
		},
		"capture-group-lookaround-invalid": {
			"comment": "(?=...) (?!...) (?<=...) (?<!...)",
			"begin": "\\(\\?<?[!=]",
			"end": "\\)(?>[+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"captures": {
				"0": { "name": "invalid.tmlanguage markup.underline.tmlanguage" }
			},
			"patterns": [
				{ "include": "#capture-group-lookaround-invalid" },
				{ "include": "$self" }
			]
		},
		"capture-group-lookaround-invalid-extended": {
			"comment": "(?=...) (?!...) (?<=...) (?<!...)",
			"begin": "\\(\\?<?[!=]",
			"end": "\\)(?>[+*?]|{(?>\\d+,?\\d*|,\\d+)})?",
			"captures": {
				"0": { "name": "invalid.tmlanguage markup.underline.tmlanguage" }
			},
			"patterns": [
				{ "include": "#capture-group-lookaround-invalid-extended" },
				{ "include": "#$self-extended" }
			]
		},
		"capture-group-modify": {
			"comment": "(?-imx)...",
			"begin": "(\\()(\\?(?![im]*x(?![imx]*-[imx-]*x))[imx-]+)([^\")]*)(\\))",
			"end": "(?=[\")])",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "invalid.tmlanguage markup.underline.tmlanguage" },
				"4": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "$self" } ]
		},
		"capture-group-modify-extended": {
			"comment": "(?imx-)...",
			"begin": "(\\()(\\?(?![imx]*-[imx-]*x)[imx-]+)([^\")]*)(\\))",
			"end": "(?=[\")])",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "invalid.tmlanguage markup.underline.tmlanguage" },
				"4": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"non-capture-group-modify": {
			"comment": "(?-imx:...)",
			"begin": "(\\()(\\?(?![im]*x(?![imx]*-[imx-]*x))[imx-]+)([^\":)]*)(:)",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "invalid.tmlanguage markup.underline.tmlanguage" },
				"4": { "name": "support.function.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "$self" } ]
		},
		"non-capture-group-modify-extended": {
			"comment": "(?imx-:...)",
			"begin": "(\\()(\\?(?![imx]*-[imx-]*x)[imx-]+)([^\":)]*)(:)",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "invalid.tmlanguage markup.underline.tmlanguage" },
				"4": { "name": "support.function.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"capture-group-conditional": {
			"comment": "(?(<name>)...) (?('5')...)",
			"begin": "(\\()(\\?)(\\()(<|('))(\\S+?)((?(<5>)'|>))([^)]*)(\\))",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"4": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"6": { "patterns": [ {"include": "#capture-group-calling-name"} ] },
				"7": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"8": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
				"9": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "$self" } ]
		},
		"capture-group-conditional-extended": {
			"comment": "(?(<name>)...) (?('5')...)",
			"begin": "(\\()(\\?)(\\()(<|('))(\\S+?)((?(<5>)'|>))([^)]*)(\\))",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"4": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"6": { "patterns": [ {"include": "#capture-group-calling-name"} ] },
				"7": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"8": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
				"9": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"capture-group-name": {
			"comment": "(?<name>...) (?'name'...)",
			"begin": "(\\()(\\?)(<|(?<quote>'))(\\S+?)((?('quote')'|>))",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage strong.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"5": {
					"name": "markup.bold.tmlanguage",
					"patterns": [ { "match": "\\W+|(?<=\\(\\?[<'])\\d+", "name": "invalid.string.tmlanguage markup.underline.tmlanguage" } ]
				},
				"6": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage strong.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "$self" } ]
		},
		"capture-group-name-extended": {
			"comment": "(?<name>...) (?'name'...)",
			"begin": "(\\()(\\?)(<|(?<quote>'))(\\S+?)((?('quote')'|>))",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage strong.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"5": {
					"name": "markup.bold.tmlanguage",
					"patterns": [ { "match": "\\W+|(?<=\\(\\?[<'])\\d+", "name": "invalid.string.tmlanguage markup.underline.tmlanguage" } ]
				},
				"6": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage strong.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"capture-group-calling-name": {
			"comment": "123 name_123",
			"patterns": [
				{
					"match": "\\d.*",
					"captures": { "0": {
						"name": "constant.numeric.tmlanguage",
						"patterns": [  { "match": "\\D+", "name": "invalid.string.tmlanguage markup.underline.tmlanguage" } ]
					} }
				},
				{
					"match": "\\w.*",
					"captures": { "0": {
						"name": "markup.bold.tmlanguage",
						"patterns": [  { "match": "\\W+", "name": "invalid.string.tmlanguage markup.underline.tmlanguage" } ]
					} }
				},
				{ "match": "\\W+", "name": "invalid.string.tmlanguage markup.underline.tmlanguage" }
			]
		},
		"capture-group-comment": {
			"comment": "(?#...)",
			"begin": "(\\()(\\?#)(?#comment)",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage markup.italic.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage markup.italic.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"contentName": "comment.tmlanguage",
			"patterns": [ { "include": "source.syntax.json.tmLanguage#escape-characters" } ]
		},
		"character-class": {
			"comment": "[...] [^...]",
			"begin": "(\\[)(\\^)?",
			"end": "(?!\\G)]",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage support.class.tmlanguage"	},
				"2": { "name": "strong.tmlanguage support.function.tmlanguage"		}
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage support.class.tmlanguage" }
			},
			"patterns": [
				{ "include": "#character-class-range"	},
				{ "include": "#unicode"					},
				{ "include": "#character-class-escape"	},
				{ "include": "#character-class-posix"	},
				{ "include": "#character-class"			},
				{ "include": "#character-class-regex"	}
			]
		},
		"character-class-escape": {
			"patterns": [
				{
					"match": "\\G(\\\\{2})([]-])",
					"captures": {
						"1": { "name": "punctuation.definition.tag.tmlanguage" },
						"2": { "name": "markup.italic.string.tmlanguage" }
					}
				},
				{
					"match": "\\G(\\\\{2})(\\^)",
					"captures": {
						"1": { "name": "constant.character.escape.tmlanguage" },
						"2": { "name": "markup.italic.string.tmlanguage" }
					}
				},
				{
					"match": "(\\\\{3})(\\\\)",
					"captures": {
						"1": { "name": "constant.character.escape.tmlanguage" },
						"2": { "name": "markup.italic.tmlanguage" }
					}
				},
				{
					"match": "(\\\\{2})(-)(?=])",
					"captures": {
						"1": { "name": "punctuation.definition.tag.tmlanguage" },
						"2": { "name": "markup.italic.string.tmlanguage" }
					}
				},
				{
					"match": "(\\\\{2})([]\\[-])",
					"captures": {
						"1": { "name": "constant.character.escape.tmlanguage" },
						"2": { "name": "markup.italic.string.tmlanguage" }
					}
				},
				{
					"match": "(\\\\{2})(&)(?=&)",
					"captures": {
						"1": { "name": "constant.character.escape.tmlanguage"	},
						"2": { "name": "markup.italic.string.tmlanguage"		}
					}
				},
				{
					"match": "(&)(\\\\{2})(&)",
					"captures": {
						"1": { "name": "markup.italic.string.tmlanguage"		},
						"2": { "name": "constant.character.escape.tmlanguage"	},
						"3": { "name": "markup.italic.string.tmlanguage"		}
					}
				},
				{ "include": "#character-type" },
				{ "include": "#characters" },
				{
					"match": "\\\\{2}",
					"name": "punctuation.definition.tag.tmlanguage"
				},
				{
					"match": "(\\\\)(/)",
					"captures": {
						"1": { "name": "punctuation.definition.tag.tmlanguage" },
						"2": { "name": "markup.italic.string.tmlanguage" }
					}
				},
				{
					"match": "\\\\\"",
					"name": "string.tmlanguage"
				},
				{
					"match": "\\\\[bfnrt]",
					"name": "constant.character.escape.tmlanguage"
				},
				{
					"match": "\\\\.?|\"|[\\x0-\\x1F]|\\x7F",
					"name": "invalid.string.tmlanguage markup.underline.tmlanguage"
				}
			]
		},
		"character-class-range": {
			"patterns": [
				{
					"match": "([\\\\-\\x{FFFFFFFF}]-[\\x0-Z])(\\\\{2}(?=-))?",
					"captures": {
						"1": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
						"2": { "name": "punctuation.definition.tag.tmlanguage"	}
					}
				},
				{
					"match": "(\\d-\\d)(\\\\{2}(?=-))?",
					"captures": {
						"1": { "name": "constant.numeric.tmlanguage"			},
						"2": { "name": "punctuation.definition.tag.tmlanguage"	}
					}
				},
				{
					"match": "([[:upper:]]-[[:upper:]])(\\\\{2}(?=-))?",
					"captures": {
						"1": { "name": "variable.other.enummember.tmlanguage"	},
						"2": { "name": "punctuation.definition.tag.tmlanguage"	}
					}
				},
				{
					"match": "([[:lower:]]-[[:lower:]])(\\\\{2}(?=-))?",
					"captures": {
						"1": { "name": "variable.other.enummember.tmlanguage"	},
						"2": { "name": "punctuation.definition.tag.tmlanguage"	}
					}
				},
				{
					"match": "(&&)(\\\\{2}(?=-))?",
					"captures": {
						"1": { "name": "keyword.other.operator.tmlanguage"		},
						"2": { "name": "punctuation.definition.tag.tmlanguage"	}
					}
				},
				{
					"match": "((?>(\\\\{3})\\\\|((\\\\{2}[CM]-(?:\\g<4>|\\\\u.{,4}|\\\\{,3}.))|\\\\{2}(?>x{\\h[^}]*}|x\\h{1,2}|[0-7]{1,3}|c.)|\\\\{1,2}u.{,4})|\\G(\\\\{2})?[]-]|\\G(?<!\\^)(\\\\{2})\\^|(\\\\{2})[]\\[-]|(\\\\{2}(?i:[DHSW]|p{[^}]*})|\\[:[^]]+:])|(\\\\{1,2}[^\\\\u])|[^]\\[\\\\]))(-)(?!&&)(?>(\\\\{2})-|\\g<1>)(\\\\{2}(?=-))?",
					"captures": {
						"0":  { "name": "support.class.string.tmlanguage" },
						"2":  { "name": "constant.character.escape.tmlanguage" },
						"3":  { "patterns": [ { "include": "#unicode" } ] },
						"5":  { "name": "punctuation.definition.tag.string.tmlanguage" },
						"6":  { "name": "constant.character.escape.tmlanguage" },
						"7":  { "name": "constant.character.escape.tmlanguage" },
						"8":  { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
						"9":  { "name": "support.class.string.tmlanguage", "patterns": [ { "include": "#character-class-escape" } ] },
						"10": { "name": "strong.tmlanguage" },
						"11": { "name": "punctuation.definition.tag.tmlanguage" },
						"12": { "name": "punctuation.definition.tag.tmlanguage" }
					}
				}
			]
		},
		"character-class-&&-test": {
			"match": "( [& \\& && \\&& &\\& \\&\\& &&& \\&&& \\&\\&& \\&&\\& &&&& \\&&&& &\\&&& &&\\&& &&&\\& \\&\\&&& \\&&\\&& \\&&&\\& &\\&\\&& &\\&&\\& &&\\&\\& \\&\\&\\&& \\&\\&&\\& \\&&\\&\\& &\\&\\&\\& \\&\\&\\&\\& ])"
		},
		"character-class-range-test": {
			"match": "([^^-_-a-b 0-9 a-z A-Z A-z a-Z\\- 0-a \\s-a a-\\s--- \\s \\s-\\s [:alnum:]-a \"-a \/-a \n-a \\\\-\\\\ \\777-a \\ca-a \\x55-a \\p{L}-a \\u0000-a \\u-agh \\x{0000}-\\x{001F} \u00b0-a \\C-\\M-\u00b0-a a-])"
		},
		"character-class-posix": {
			"comment": "[:...:] [:^...:]",
			"match": "(\\[(:\\^?))(?>(\\s*:])|([^]]+)((:)]))",
			"captures": {
				"1": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"2": { "name": "strong.tmlanguage" },
				"3": { "name": "invalid.tmlanguage markup.underline.tmlanguage" },
				"4": { "patterns": [ { "include": "#character-class-posix-value" } ] },
				"5": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"6": { "name": "strong.tmlanguage" }
			}
		},
		"character-class-posix-value": {
			"match": "(.*\\s.*)|(.*?)((?i)alnum|alpha|ascii|blank|cntrl|x?digit|graph|lower|print|punct|space|upper|word)(.*)|(.+)",
			"captures": {
				"1": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
				"2": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
				"3": { "name": "variable.other.enummember.tmlanguage", "patterns": [ { "match": "[A-Z]", "name": "invalid.tmlanguage markup.italic.tmlanguage" } ] },
				"4": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
				"5": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" }
			}
		},
		"character-class-regex": {
			"comment": ".",
			"match": ".",
			"name": "markup.italic.string.tmlanguage"
		},
		"character-type": {
			"comment": "\\D \\d \\H \\h \\S \\s \\W \\w",
			"match": "(?i)\\\\{2}([DHSW])",
			"name": "variable.other.enummember.tmlanguage"
		},
		"character-any": {
			"comment": "\\X .",
			"match": "\\\\{2}X|\\.",
			"name": "variable.other.enummember.tmlanguage"
		},
		"characters": {
			"comment": "\\a \\e \\f \\n \\r \\t \\v",
			"match": "\\\\{2}[aefnrtv]",
			"name": "punctuation.definition.list.begin.markdown"
		},
		"unicode": {
			"comment": "\\777 \\xFF \\cZ \\x{13FFF} \\u0000 \\p{L} \\C-\\M-]",
			"patterns": [
				{
					"match": "(\\\\{2})([0-7]{1,3})",
					"captures": {
						"1": { "name": "punctuation.definition.list.begin.markdown.tmlanguage" },
						"2": { "name": "constant.numeric.tmlanguage" }
					}
				},
				{
					"match": "(\\\\{2}x)(\\h{1,2})",
					"captures": {
						"1": { "name": "punctuation.definition.list.begin.markdown.tmlanguage" },
						"2": { "name": "constant.numeric.tmlanguage" }
					}
				},
				{
					"match": "(\\\\{2}x{)(1[0-3]\\h{4}|\\h{1,5})([^}]*)(})",
					"captures": {
						"1": { "name": "meta.embedded.tmlanguage punctuation.definition.list.begin.markdown.tmlanguage" },
						"2": { "name": "constant.numeric.tmlanguage" },
						"3": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
						"4": { "name": "meta.embedded.tmlanguage punctuation.definition.list.begin.markdown.tmlanguage" }
					}
				},
				{
					"match": "(\\\\{2}c)([^a-zA-Z]*)([a-zA-Z])?",
					"captures": {
						"1": { "name": "punctuation.definition.list.begin.markdown.tmlanguage" },
						"2": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
						"3": { "name": "markup.bold.tmlanguage" }
					}
				},
				{
					"match": "(?>(\\\\{2}u)|(\\\\u))([^\"].{,3})",
					"captures": {
						"1": { "name": "punctuation.definition.list.begin.markdown.tmlanguage" },
						"2": { "name": "constant.character.escape.tmlanguage" },
						"3": {
							"patterns": [
								{ "match": "\\h+", "name": "constant.numeric.tmlanguage" },
								{ "match": "\\H+", "name": "invalid.string.tmlanguage markup.underline.tmlanguage" }
							]
						}
					}
				},
				{
					"match": "(\\\\{2}[pP]{)(\\^)?(.[^}]*)(})?",
					"captures": {
						"1": { "name": "meta.embedded.tmlanguage punctuation.definition.list.begin.markdown.tmlanguage" },
						"2": { "name": "support.function.tmlanguage" },
						"3": {
							"patterns": [
								{
									"comment": "https://github.com/kkos/oniguruma/blob/bb31b4d402ee3f3a3bc4855c9d0271f43a3e4793/doc/UNICODE_PROPERTIES",
									"match": "(?i)(.*?)((?>In)?\\g<5>(?>Ahom|Anatolian\\g<5>Hieroglyphs|Armenian|Avestan|Balinese|Bengali|Bhaiksuki|Brahmi|Buginese|Carian|Caucasian\\g<5>Albanian|Chakma|Cham|Chorasmian|Deseret|Duployan|Elbasan|Elymaic|Gothic|Grantha|Gujarati|Gurmukhi|Hanunoo|Hatran|Hebrew|Hiragana|Javanese|Lepcha|Kaithi|Kannada|Kharoshthi|Khojki|Khudawadi|Mahajani|Makasar|Malayalam|Mandaic|Manichaean|Marchen|Medefaidrin|Miao|Nabataean|Nandinagari|Newa|Nushu|Osmanya|Palmyrene|Phoenician|Rejang|Runic|Samaritan|Saurashtra|Sharada|Shavian|Siddham|Sogdian|Soyombo|Tagalog|Tagbanwa|Telugu|Thaana|Tibetan|Tifinagh|Tirhuta|Ugaritic|Wancho|Warang\\g<5>Citi|Yezidi|Zanabazar\\g<5>Square)|A\\g<5>(?>dla?m|ghb|Hex|lphabetic|ny|r(?>abic|ab|m[in])|S\\g<5>C\\g<5>I\\g<5>I\\g<5>Hex\\g<5>Digit|ssigned|vst)|B\\g<5>(?>a(?>li|mum?|ssa\\g<5>Vah|ss|ta?k)|eng|hks|idi\\g<5>C(?>ontrol)?|opomofo|opo|raille|ra[hi]|ugi|uhi?d)|C\\g<5>(?>a(?>km|nadian\\g<5>Aboriginal|ns|ri|se\\g<5>Ignorable|sed\\g<5>Letter|sed)|h\\g<5>(?>anges\\g<5>When\\g<5>(?>Case(?>fold|mapp)|(?>Lower|Title|Upper)cas)ed|erokee|er|rs)|lose\\g<5>Punctuation|o(?>mbining\\g<5>Mark|mmon|nnector\\g<5>Punctuation|ntrol|ptic|pt)?|prt|uneiform|urrency\\g<5>Symbol|W\\g<5>C[FM]|W[LTU]|ypriot|yrillic|yrl|[cfIns])?|D\\g<5>(?>ash\\g<5>Punctuation|ash|e(?>cimal\\g<5>Number|fault\\g<5>Ignorable\\g<5>Code\\g<5>Point|precated|p|vanagari|va)|i(?>acritic|ak?|ves\\g<5>Akuru)?|ogra?|srt|upl)|E\\g<5>(?>Base|Comp|gyptian\\g<5>Hieroglyphs|gyp|lba|lym|Mod|moji\\g<5>(?>Component|Modifier\\g<5>(?>Base)?|Presentation)?|nclosing\\g<5>Mark|Pres|thiopic|thi|xtende(?>d\\g<5>Pictographic|r)|xt\\g<5>Pict|xt)|F\\g<5>(?>inal\\g<5>Punctuation|ormat)|G\\g<5>(?>eorgian|eor|lagolitic|lag|on[gm]|oth|r\\g<5>(?>an|apheme\\g<5>(?>Base|Extend|Link)|Base|Ext|ee?k|Link)|u(?>jr|njala\\g<5>Gondi|ru))|H\\g<5>(?>an\\g<5>(?>gul|ifi\\g<5>Rohingya|[gio])?|atr|ebr|ex\\g<5>Digit|ex|ira|luw|mn[gp]|ung|yphen)|I\\g<5>(?>D\\g<5>(?>Continue|C|eographic|eo|Start|S\\g<5>(?>B|Tr)inary\\g<5>Operator|S[BT]?)|mperial\\g<5>Aramaic|tal)|J\\g<5>(?>ava|oin\\g<5>C(?>ontrol)?)|K\\g<5>(?>a(?>li|na|takana|yah\\g<5>Li)|h(?>ar|itan\\g<5>Small\\g<5>Script|me?r|oj)|its|nda|thi)|L\\g<5>(?>a(?>na|oo?|ti?n)|epc|etter\\g<5>(?>Number)?|i(?>mbu?|n[ab]|ne\\g<5>Separator|near\\g<5>[AB]|su)|O(?>E|gical\\g<5>Order\\g<5>Exception|wercase\\g<5>(?>Letter)?)?|y[cd]i(?>an)?|[Clmtu])?|M\\g<5>(?>a(?>hj|ka|n[di]|r[ck]|saram\\g<5>Gondi|th\\g<5>Symbol|th)|c|e\\g<5>(?>df|etei\\g<5>Mayek|nde\\g<5>Kikakui|nd|roitic\\g<5>(?>Cursive|Hieroglyphs)|r[co])?|lym|n|odifier\\g<5>(?>Letter|Symbol)|odi|ongolian|ong|roo?|tei|ultani|ult|yanmar|ymr)?|N\\g<5>(?>and|arb|bat|Char|ew\\g<5>Tai\\g<5>Lue|koo?|oncharacter\\g<5>Code\\g<5>Point|onspacing\\g<5>Mark|shu|umber|yiakeng\\g<5>Puachue\\g<5>Hmong|[dlo])?|O\\g<5>(?>Alpha|D\\g<5>I|gh?am|Gr\\g<5>Ext|I\\g<5>D[CS]|l\\g<5>(?>Chiki|ck|d\\g<5>(?>Hungarian|Italic|Permic|Persian|Sogdian|(?>North|South)\\g<5>Arabian|Turkic)|ower)|Math|pen\\g<5>Punctuation|rkh|ri?ya|sa?ge|sma|ther\\g<5>(?>Alphabetic|Default\\g<5>Ignorable\\g<5>Code\\g<5>Point|Grapheme\\g<5>Extend|I\\g<5>D\\g<5>(?>Continue|Start)|Letter|Lowercase|Math|Number|Punctuation|Symbol|Uppercase)?|Upper)|P\\g<5>(?>a\\g<5>(?>hawh\\g<5>Hmong|lm|ragraph\\g<5>Separator|t\\g<5>(?>Syn|W\\g<5>S|tern\\g<5>(?>Syntax|White\\g<5>Space))|u\\g<5>Cin\\g<5>Hau|uc)|C\\g<5>M|erm|h(?>ags\\g<5>Pa|ag|l[ip]|nx)?|lrd|repended\\g<5>Concatenation\\g<5>Mark|rivate\\g<5>Use|rti|salter\\g<5>Pahlavi|unctuation|[cdefios])?|Q\\g<5>(?>aa[ci]|Mark|uotation\\g<5>Mark)|R\\g<5>(?>adical|egional\\g<5>Indicator|I|jng|ohg|unr)|S\\g<5>(?>a(?>mr|rb|ur)|entence\\g<5>Terminal|eparator|gnw|haw|hrd|i(?>dd|gn\\g<5>Writing|nhala|n[dh])|o(?>ft\\g<5>Dotted|g[do]|ra\\g<5>Sompeng|ra|yo)?|pace\\g<5>Separator|pacing\\g<5>Mark|Term|undanese|und|urrogate|y(?>loti\\g<5>Nagri|lo|mbol|rc|riac)|[cDkm])?|T\\g<5>(?>a(?>gb|i\\g<5>(?>Le|Tham|Viet)|kri?|l[eu]|mi?l|ngut|ng|vt)|elu|erminal\\g<5>Punctuation|erm|fng|glg|ha[ai]|i(?>bt|rh|tlecase\\g<5>Letter))|U\\g<5>(?>gar|Ideo|nassigned|nified\\g<5>Ideograph|nknown|ppercase\\g<5>(?>Letter)?)|V\\g<5>(?>aii?|ariation\\g<5>Selector|S)|W\\g<5>(?>ara|cho|(?>hite\\g<5>)?Space)|X\\g<5>(?>I\\g<5>D\\g<5>(?>Continue|Start|[CS])|peo|sux)|Y\\g<5>(?>ezi|iii|i)|Z\\g<5>(?>anb|inh|yyy|zzz|[lps])?|In\\g<5>(?>A\\g<5>(?>dlam|egean\\g<5>Numbers|lchemical\\g<5>Symbols|lphabetic\\g<5>Presentation\\g<5>Forms|ncient\\g<5>(?>Greek\\g<5>(?>Musical\\g<5>Notation|Numbers)|Symbols)|rabic\\g<5>(?>Extended\\g<5>A|Mathematical\\g<5>Alphabetic\\g<5>Symbols|Presentation\\g<5>Forms\\g<5>[AB]|Supplement)?|rrows)|B\\g<5>(?>amum\\g<5>(?>Supplement)?|asic\\g<5>(?>Latin|Vah)|assa\\g<5>Vah|atak|lock\\g<5>Elements|opomofo\\g<5>(?>Extended)?|ox\\g<5>Drawing|raille\\g<5>Patterns|uhid|yzantine\\g<5>Musical\\g<5>Symbols)|C\\g<5>(?>herokee\\g<5>(?>Supplement)?|hess\\g<5>Symbols|J\\g<5>K\\g<5>(?>Compatibility\\g<5>(?>Forms|Ideographs\\g<5>(?>Supplement)?)?|Radicals\\g<5>Supplement|Strokes|Symbols\\g<5>and\\g<5>Punctuation|Unified\\g<5>Ideographs\\g<5>(?>Extension\\g<5>[ABCDEFG])?)|ombining\\g<5>(?>Diacritical\\g<5>Marks\\g<5>(?>Extended|for\\g<5>Symbols|Supplement)?|Half\\g<5>Marks)|ommon\\g<5>Indic\\g<5>Number\\g<5>Forms|ontrol\\g<5>Pictures|optic\\g<5>(?>Epact\\g<5>Numbers)?|ounting\\g<5>Rod\\g<5>Numerals|uneiform\\g<5>(?>Numbers\\g<5>and\\g<5>Punctuation)?|urrency\\g<5>Symbols|ypriot\\g<5>Syllabary|yrillic\\g<5>(?>Extended\\g<5>[ABC]|Supplement)?)|D\\g<5>(?>evanagari\\g<5>(?>Extended)?|ingbats|ives\\g<5>Akuru|ogra|omino\\g<5>Tiles)|E\\g<5>(?>arly\\g<5>Dynastic\\g<5>Cuneiform|gyptian\\g<5>Hieroglyph\\g<5>(?>Format\\g<5>Control)?s|moticons|nclosed\\g<5>(?>Alphanumeric\\g<5>s(?>upplement)?|C\\g<5>J\\g<5>K\\g<5>Letters\\g<5>and\\g<5>Months|Ideographic\\g<5>Supplement)|thiopic\\g<5>(?>Extended\\g<5>A?|Supplement)?)?|G\\g<5>(?>eneral\\g<5>Punctuation|eometric\\g<5>Shapes\\g<5>(?>Extended)?|eorgian\\g<5>(?>Extended|Supplement)?|lagolitic\\g<5>(?>Supplement)?|reek\\g<5>(?>and\\g<5>Coptic|Extended)|unjala\\g<5>Gondi)|H\\g<5>(?>alfwidth\\g<5>and\\g<5>Fullwidth\\g<5>Forms|angul\\g<5>(?>Compatibility\\g<5>Jamo|Jamo\\g<5>(?>Extended\\g<5>[AB])?|Syllables)|anifi\\g<5>Rohingya|erited|igh\\g<5>(?>Private\\g<5>Use\\g<5>)?Surrogates)?|I\\g<5>(?>deographic\\g<5>(?>Description\\g<5>Characters|Symbols\\g<5>and\\g<5>Punctuation)|mperial\\g<5>Aramaic|ndic\\g<5>Siyaq\\g<5>Numbers|nscriptional\\g<5>Pa(?>hlavi|rthian)|P\\g<5>A\\g<5>Extensions|tial\\g<5>Punctuation)|K\\g<5>(?>ana\\g<5>(?>Extended\\g<5>A|Supplement)|anbun|angxi\\g<5>Radicals|atakana\\g<5>(?>Phonetic\\g<5>Extensions)?|ayah\\g<5>Li|hitan\\g<5>Small\\g<5>Script|hmer\\g<5>(?>Symbols)?)|L\\g<5>(?>ao|atin\\g<5>(?>1\\g<5>Supplement|Extended\\g<5>(?>Additional|[ABCDE]))|etterlike\\g<5>Symbols|imbu|inear\\g<5>(?>A|B\\g<5>(?>Ideograms|Syllabary))|isu\\g<5>(?>Supplement)?|ow\\g<5>Surrogates|y[cd]ian)|M\\g<5>(?>ahjong\\g<5>Tiles|asaram\\g<5>Gondi|athematical\\g<5>(?>Alphanumeric\\g<5>Symbols|Operators)|ayan\\g<5>Numerals|eetei\\g<5>Mayek\\g<5>(?>Extensions)?|ende\\g<5>Kikakui|eroitic\\g<5>(?>Cursive|Hieroglyphs)|iscellaneous\\g<5>(?>Mathematical\\g<5>Symbols\\g<5>[AB]|Symbols\\g<5>(?>and\\g<5>(?>Arrows|Pictographs))?|Technical)|odifier\\g<5>Tone\\g<5>Letters|odi|ongolian\\g<5>(?>Supplement)?|ro|usical\\g<5>Symbols|ultani\\g<5>(?>Symbols)?|yanmar\\g<5>(?>Extended\\g<5>[AB])?)|N\\g<5>(?>ew\\g<5>Tai\\g<5>Lue|Ko|o\\g<5>Block|umber\\g<5>Forms|yiakeng\\g<5>Puachue\\g<5>Hmong)|O\\g<5>(?>gham|ld\\g<5>(?>Hungarian|Italic|North\\g<5>Arabian|Permic|Persian|Sogdian|South\\g<5>Arabian|Turkic)|l\\g<5>Chiki|ptical\\g<5>Character\\g<5>Recognition|riya|rnamental\\g<5>Dingbats|sage|ttoman\\g<5>Siyaq\\g<5>Numbers)|P\\g<5>(?>ahawh\\g<5>Hmong|au\\g<5>Cin\\g<5>Hau|hags\\g<5>pa|haistos\\g<5>Disc|honetic\\g<5>Extensions\\g<5>(?>Supplement)?|laying\\g<5>Cards|rivate\\g<5>Use\\g<5>Area|salter\\g<5>Pahlavi)|Rumi\\g<5>Numeral\\g<5>Symbols|S\\g<5>(?>criptional\\g<5>Pa(?>hlavi|rthian)|horthand\\g<5>Format\\g<5>Controls|inhala\\g<5>(?>Archaic\\g<5>Numbers)?|mall\\g<5>(?>Form\\g<5>Variants|Kana\\g<5>Extension)?|ora\\g<5>Sompeng|pacing\\g<5>Modifier\\g<5>Letters|pecials|undanese\\g<5>(?>Supplement)?|uperscripts\\g<5>and\\g<5>Subscripts|upplementa\\g<5>(?>l\\g<5>(?>Arrows\\g<5>[ABC]|Mathematical\\g<5>Operators|Punctuation|Symbols\\g<5>and\\g<5>Pictographs)|ry\\g<5>Private\\g<5>Use\\g<5>Area\\g<5>[AB])|utton\\g<5>Sign\\g<5>Writing|yloti\\g<5>Nagri|ymbols\\g<5>(?>and\\g<5>Pictographs\\g<5>Extended\\g<5>A|for\\g<5>Legacy\\g<5>Computing)|yriac\\g<5>(?>Supplement)?)|T\\g<5>(?>ags|ai\\g<5>(?>Le|Tham|Viet|Xuan\\g<5>Jing\\g<5>Symbols)?|akri|amil\\g<5>(?>Supplement)?|angut\\g<5>(?>Components|Supplement)?|hai|ransport\\g<5>and\\g<5>Map\\g<5>Symbols)|U\\g<5>(?>nified\\g<5>Canadian\\g<5>Aboriginal\\g<5>Syllabics\\g<5>(?>Extended)?)|V\\g<5>(?>ai|ariation\\g<5>Selectors\\g<5>(?>Supplement)?|edic\\g<5>Extensions|ertical\\g<5>Forms)|Y\\g<5>(?>ijing\\g<5>Hexagram\\g<5>Symbols|i\\g<5>(?>Radical|Syllable)s)))(.*)|(.+)|([ _-]*){0}",
									"captures": {
										"1": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
										"2": { "name": "variable.other.enummember.tmlanguage" },
										"3": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
										"4": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
										"5": { "name": "punctuation.definition.tag.tmlanguage" }
									}
								}
							]
						},
						"4": { "name": "meta.embedded.tmlanguage punctuation.definition.list.begin.markdown.tmlanguage" }
					}
				},
				{
					"match": "\\\\{2}[CM]([^-]*)-?(?>(\\\\{3})(\\\\)|\\g<0>|(\\\\{2})?(\\\\u.{,4}|\\\\?.))",
					"captures": {
						"0": { "name": "punctuation.definition.list.begin.markdown.tmlanguage" },
						"1": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
						"2": { "name": "constant.character.escape.tmlanguage" },
						"3": { "name": "markup.bold.tmlanguage" },
						"4": { "name": "punctuation.definition.tag.tmlanguage" },
						"5": { "name": "markup.bold.string.tmlanguage", "patterns": [ { "include": "source.syntax.json.tmLanguage#escape-characters" } ] }
					}
				}
			]
		},
		"subroutine": {
			"comment": "\\g<99> \\g'name'",
			"match": "(\\\\{2}g)(?>(<)([^>\"]*)(>)?|(')([^'\"]*)(')?)",
			"captures": {
				"1": { "name": "string.regexp.tmlanguage" },
				"2": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"3": { "patterns": [ {"include": "#capture-group-calling-name"} ] },
				"4": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"5": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"6": { "patterns": [ {"include": "#capture-group-calling-name"} ] },
				"7": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" }
			}
		},
		"backreference": {
			"patterns": [
				{
					"comment": "\\1",
					"match": "(\\\\{2})([1-9]\\d{,2})(\\d*)",
					"captures": {
						"1": { "name": "string.regexp.tmlanguage"	 },
						"2": { "name": "constant.numeric.tmlanguage" },
						"3": { "name": "invalid.tmlanguage"			 }
					}
				},
				{
					"comment": "\\k<99> \\k'name'",
					"match": "(\\\\{2}k)(?>(<)([^>\"]*)(>)?|(')([^'\"]*)(')?)",
					"captures": {
						"1": { "name": "string.regexp.tmlanguage" },
						"2": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
						"3": { "patterns": [ {"include": "#capture-group-calling-name"} ] },
						"4": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
						"5": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
						"6": { "patterns": [ {"include": "#capture-group-calling-name"} ] },
						"7": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" }
					}
				}
			]
		},
		"quantifier": {
			"comment": "+ * ? {1,9}",
			"patterns": [
				{
					"match": "\\G[+*?]",
					"name": "invalid.tmlanguage markup.underline.tmlanguage"
				},
				{
					"match": "[+*?]",
					"name": "keyword.tmlanguage"
				},
				{
					"match": "\\G{(?>\\d+,?\\d*|,\\d+)}",
					"name": "invalid.tmlanguage markup.underline.tmlanguage"
				},
				{
					"match": "({)(?<number>\\d+)?(,)?((?(<number>)\\d*|\\d+))(})",
					"captures": {
						"1": { "name": "meta.embedded.tmlanguage keyword.tmlanguage" },
						"2": { "name": "constant.numeric.tmlanguage" },
						"3": { "name": "keyword.control.tmlanguage" },
						"4": { "name": "constant.numeric.tmlanguage" },
						"5": { "name": "meta.embedded.tmlanguage keyword.tmlanguage" }
					}
				}
			]
		},
		"anchor": {
			"comment": "$ ^ \\A \\B \\b \\G \\K \\Z \\z",
			"match": "[$^]|\\\\{2}[ABbGKZz]",
			"name": "variable.tmlanguage"
		},
		"alternation": {
			"comment": "|",
			"match": "\\|",
			"name": "keyword.other.operator.tmlanguage"
		},
		"regex": {
			"comment": "Match anything left over. Style it bold and colour with very light gray",
			"match": ".",
			"name": "entity.name.label.tmlanguage strong.string.tmlanguage"
		},
		"invalid": {
			"comment": "invalid single escaped characters including newlines, rouge right brackets, unescaped double quotes and any invalid control characters",
			"match": "\\\\.?|\\)|\"|[\\x0-\\x1F]|\\x7F",
			"name": "invalid.string.tmlanguage markup.underline.tmlanguage"
		},
		"test": {
			"match": "(?x){2,3}{2,3}({2,3}(?:{2,3})){2,3} () (?<= (?= (?>) )? ) (?= (?= )? ) [a-z&&]u°𐐷Ꚛ�𐀀𐃘[�𐃘] \\g<99> \\x555 QabcE $ \\$ \\1234567890 abcde\fghijklm\nopq\rs\t\u0000vwxyz bfnrtu \\a\\b\\cZ\\d\\e\\f\\g<0>\\h\\i\\j\\k'0'\\l\\m\\n\\o\\p{L}\\q\\r\\s\\t\\u0000\\v\\w\\x{13FFFF}\\y\\z °Ççë£ ||| ABCDEFGHIJKLMNOPQRSTUVWXYZ `1234567890-=\\[]\\\\;',./ ~!@\\#$%^&*()_+{}|:\"<>?   \\A\\B\\C-]\\D\\E\\F\\G\\H\\I\\J\\K\\L\\M-a\\N\\O\\P{L}\\Q\\R\\S\\T\\U\\V\\W\\X\\Y\\Z \\x{201E} \\p{L} \\p{-LetterLaaLaa--LL--LL--} \\`\\1\\2\\3\\4\\5\\6\\7\\8\\9\\0\\-\\=\\[\\]\\\\\\;\\'\\,\\.\\/\\ \\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\_\\+\\{\\}\\|\\:\\\"\\<\\>\\? [[:^upper:]] At aT aa 1000 Q.E q.e a$abc#comment\n (?-x) #comment\n/z"
		}
	}
}