{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.syntax.regex.tmLanguage",
	"name": "TextMate Language Regex",
	"patterns": [
		{ "include": "#character-type"						},
		{ "include": "#characters"							},
		{ "include": "#anchor"								},
		{ "include": "#unicode"								},
		{ "include": "#subroutine"							},
		{ "include": "#backreference"						},
		{ "include": "#alternation"							},
		{ "include": "#quantifier"							},
		{ "include": "#character-class"						},
		{ "include": "#non-capture-group"					},
		{ "include": "#non-capture-group-modify"			},
		{ "include": "#non-capture-group-modify-extended"	},
		{ "include": "#capture-group-modify"				},
		{ "include": "#capture-group-modify-extended"		},
		{ "include": "#capture-group-conditional"			},
		{ "include": "#capture-group-comment"				},
		{ "include": "#capture-group-name"					},
		{ "include": "#capture-group"						},
		{ "include": "#escape-character"					},
		{ "include": "#invalid"								},
		{ "include": "#regex"								}
	],
	"repository": {
		"$self-extended": {
			"patterns": [
				{ "include": "#comment-extended"					},
				{ "include": "#escape-character-extended"			},
				{ "include": "#non-capture-group-modify-extended"	},
				{ "include": "#non-capture-group-modify"			},
				{ "include": "#non-capture-group-extended"			},
				{ "include": "#capture-group-comment"				},
				{ "include": "#capture-group-modify-extended"		},
				{ "include": "#capture-group-modify"				},
				{ "include": "#capture-group-conditional-extended"	},
				{ "include": "#capture-group-name-extended"			},
				{ "include": "#capture-group-extended"				},
				{ "include": "$self"								}
			]
		},
		"comment-extended": {
			"comment": "#...\n",
			"match": "(?x)#comment\n (\\#)(.*?(?<!\\\\)\\\\{2}*|.*?)(\\\\n|(?=\")|$)|(\\ )",
			"captures": {
				"1": { "name": "support.function.tmlanguage" },
				"2": {
					"name": "comment.tmlanguage",
					"patterns": [ { "include": "source.syntax.json.tmLanguage#escape-characters" } ]
				},
				"3": { "name": "constant.character.escape.tmlanguage" },
				"4": { "name": "comment.tmlanguage" }
			}
		},
		"escape-character": {
			"comment": "\\[ \\{ \\} \\( \\) \\$ \\? \\| \\^ \\* \\+ \\. \\\\ \" \b \f \n \r \t",
			"patterns": [
				{
					"match": "(\\\\{2})([\\[{}()$?|^*+.])",
					"captures": {
						"1": { "name": "constant.character.escape.tmlanguage" },
						"2": { "name": "entity.name.label.tmlanguage strong.string.tmlanguage" }
					}
				},
				{
					"match": "(\\\\{3})(\\\\)",
					"captures": {
						"1": { "name": "constant.character.escape.tmlanguage" },
						"2": { "name": "entity.name.label.tmlanguage strong.tmlanguage" }
					}
				},
				{
					"match": "\\\\\"",
					"name": "string.tmlanguage"
				},
				{
					"match": "\\\\[bfnrt]",
					"name": "constant.character.escape.tmlanguage"
				}
			]
		},
		"escape-character-extended": {
			"comment": "\\#",
			"match": "(\\\\{2})(#| )",
			"captures": {
				"1": { "name": "constant.character.escape.tmlanguage" },
				"2": { "name": "entity.name.label.tmlanguage strong.tmlanguage" }
			}
		},
		"capture-group": {
			"comment": "( ... )",
			"begin": "\\(",
			"end": "\\)",
			"captures": {
				"0": { "name": "meta.embedded.tmlanguage strong.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "$self" } ]
		},
		"capture-group-extended": {
			"comment": "( ... )",
			"begin": "\\(",
			"end": "\\)",
			"captures": {
				"0": { "name": "meta.embedded.tmlanguage strong.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"non-capture-group": {
			"comment": "(?:...) (?>...) (?!...) (?<!...) (?<=...) (?imx-:...) (?imx-) |#[imx-]+(?::|([^)]*))\n",
			"begin": "(\\()(\\?(?>:|>|<?[!=]))",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "$self" } ]
		},
		"non-capture-group-extended": {
			"comment": "(?:...) (?>...) (?!...) (?<!...) (?<=...) (?imx-:...) (?imx-)",
			"begin": "(\\()(\\?(?>:|>|<?[!=]))",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"capture-group-modify": {
			"comment": "(?-imx)...",
			"begin": "(\\()(\\?(?![im]*x(?![imx]*-[imx-]*x))[imx-]+)([^\")]*)(\\))",
			"end": "(?=[\")])",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "invalid.tmlanguage markup.underline.tmlanguage" },
				"4": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "$self" } ]
		},
		"capture-group-modify-extended": {
			"comment": "(?imx-)...",
			"begin": "(\\()(\\?(?![imx]*-[imx-]*x)[imx-]+)([^\")]*)(\\))",
			"end": "(?=[\")])",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "invalid.tmlanguage markup.underline.tmlanguage" },
				"4": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"non-capture-group-modify": {
			"comment": "(?-imx:...)",
			"begin": "(\\()(\\?(?![im]*x(?![imx]*-[imx-]*x))[imx-]+)([^\":)]*)(:)",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "invalid.tmlanguage markup.underline.tmlanguage" },
				"4": { "name": "support.function.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "$self" } ]
		},
		"non-capture-group-modify-extended": {
			"comment": "(?imx-:...)",
			"begin": "(\\()(\\?(?![imx]*-[imx-]*x)[imx-]+)([^\":)]*)(:)",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "invalid.tmlanguage markup.underline.tmlanguage" },
				"4": { "name": "support.function.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"capture-group-conditional": {
			"comment": "(?(<name>)...) (?('5')...)",
			"begin": "(\\()(\\?)(\\()(<|('))(\\S+?)((?(<5>)'|>))([^)]*)(\\))",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"4": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"6": { "patterns": [ {"include": "#capture-group-calling-name"} ] },
				"7": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"8": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
				"9": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "$self" } ]
		},
		"capture-group-conditional-extended": {
			"comment": "(?(<name>)...) (?('5')...)",
			"begin": "(\\()(\\?)(\\()(<|('))(\\S+?)((?(<5>)'|>))([^)]*)(\\))",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" },
				"4": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"6": { "patterns": [ {"include": "#capture-group-calling-name"} ] },
				"7": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"8": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
				"9": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"capture-group-name": {
			"comment": "(?<name>...) (?'name'...)",
			"begin": "(\\()(\\?)(<|(?<quote>'))(\\S+?)((?('quote')'|>))",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage strong.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"5": {
					"name": "markup.bold.tmlanguage",
					"patterns": [ { "match": "\\W+|(?<=\\(\\?[<'])\\d+", "name": "invalid.string.tmlanguage markup.underline.tmlanguage" } ]
				},
				"6": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage strong.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "$self" } ]
		},
		"capture-group-name-extended": {
			"comment": "(?<name>...) (?'name'...)",
			"begin": "(\\()(\\?)(<|(?<quote>'))(\\S+?)((?('quote')'|>))",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage strong.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" },
				"3": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"5": {
					"name": "markup.bold.tmlanguage",
					"patterns": [ { "match": "\\W+|(?<=\\(\\?[<'])\\d+", "name": "invalid.string.tmlanguage markup.underline.tmlanguage" } ]
				},
				"6": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage strong.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"patterns": [ { "include": "#$self-extended" } ]
		},
		"capture-group-calling-name": {
			"comment": "123 name_123",
			"patterns": [
				{
					"match": "\\d.*",
					"captures": { "0": {
						"name": "constant.numeric.tmlanguage",
						"patterns": [  { "match": "\\D+", "name": "invalid.string.tmlanguage markup.underline.tmlanguage" } ]
					} }
				},
				{
					"match": "\\w.*",
					"captures": { "0": {
						"name": "markup.bold.tmlanguage",
						"patterns": [  { "match": "\\W+", "name": "invalid.string.tmlanguage markup.underline.tmlanguage" } ]
					} }
				},
				{ "match": "\\W+", "name": "invalid.string.tmlanguage markup.underline.tmlanguage" }
			]
		},
		"capture-group-comment": {
			"comment": "(?#...)",
			"begin": "(\\()(\\?#)(?#comment)",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage markup.italic.tmlanguage constant.character.set.regexp.tmlanguage" },
				"2": { "name": "support.function.tmlanguage" }
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage markup.italic.tmlanguage constant.character.set.regexp.tmlanguage" }
			},
			"contentName": "comment.tmlanguage",
			"patterns": [ { "include": "source.syntax.json.tmLanguage#escape-characters" } ]
		},
		"character-class": {
			"comment": "[...] [^...]",
			"begin": "(\\[)(\\^)?(])?",
			"end": "]",
			"beginCaptures": {
				"1": { "name": "meta.embedded.tmlanguage support.class.tmlanguage"	},
				"2": { "name": "strong.tmlanguage support.function.tmlanguage"		},
				"3": { "name": "markup.italic.string.tmlanguage"					}
			},
			"endCaptures": {
				"0": { "name": "meta.embedded.tmlanguage support.class.tmlanguage" }
			},
			"patterns": [
				{ "include": "#unicode"					},
				{ "include": "#character-class-range"	},
				{ "include": "#character-class-escape"	},
				{ "include": "#character-class-posix"	},
				{ "include": "#character-class"			},
				{ "include": "#character-class-regex"	}
			]
		},
		"character-class-escape": {
			"patterns": [
				{
					"match": "\\G(\\\\{2})(])",
					"captures": {
						"1": { "name": "invalid.tmlanguage" },
						"2": { "name": "markup.italic.string.tmlanguage" }
					}
				},
				{
					"match": "(\\\\{3})(\\\\)",
					"captures": {
						"1": { "name": "constant.character.escape.tmlanguage" },
						"2": { "name": "markup.italic.tmlanguage" }
					}
				},
				{
					"match": "(\\\\{2})([]\\[^-])",
					"captures": {
						"1": { "name": "constant.character.escape.tmlanguage" },
						"2": { "name": "markup.italic.string.tmlanguage" }
					}
				},
				{
					"match": "(?i)\\\\{2}[DHSW]",
					"name": "variable.other.enummember.tmlanguage"
				},
				{
					"match": "\\\\{2}[abefnrtv]",
					"name": "punctuation.definition.list.begin.markdown"
				},
				{
					"match": "\\\\{2}",
					"name": "invalid.tmlanguage"
				},
				{
					"match": "(\\\\)(/)",
					"captures": {
						"1": { "name": "invalid.tmlanguage" },
						"2": { "name": "markup.italic.string.tmlanguage" }
					}
				},
				{
					"match": "\\\\\"",
					"name": "string.tmlanguage"
				},
				{
					"match": "\\\\[bfnrt]",
					"name": "constant.character.escape.tmlanguage"
				},
				{
					"match": "\\\\.?|\"|(?! )\\s",
					"name": "invalid.string.tmlanguage markup.underline.tmlanguage"
				}
			]
		},
		"character-class-range": {
			"comment": "0-9 a-z A-Z .-. &&",
			"match": "(\\d-\\d)|([[:lower:]]-[[:lower:]]|[[:upper:]]-[[:upper:]])|((?:[^]\\[\\\\]|(\\\\{3})\\\\)-[^]\\[\\\\])|(&&)",
			"captures": {
				"1": { "name": "constant.numeric.tmlanguage"			},
				"2": { "name": "variable.other.enummember.tmlanguage"	},
				"3": { "name": "support.class.tmlanguage"				},
				"4": { "name": "constant.character.escape.tmlanguage"	},
				"5": { "name": "keyword.other.operator.tmlanguage"		}
			}
		},
		"character-class-posix": {
			"comment": "[:...:] [:^...:]",
			"match": "(\\[:\\^?)(?>(\\s*:])|([^]]+)(:]))",
			"captures": {
				"1": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"2": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" },
				"3": { "patterns": [ { "include": "#character-class-posix-value" } ] },
				"4": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" }
			}
		},
		"character-class-posix-value": {
			"match": "(.*\\s.*)|(.*?)(alnum|alpha|ascii|blank|cntrl|x?digit|graph|lower|print|punct|space|upper|word)(.*)|(.+)",
			"captures": {
				"1": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage"	},
				"2": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage"	},
				"3": { "name": "variable.other.enummember.tmlanguage"					},
				"4": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage"	},
				"5": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage"	}
			}
		},
		"character-class-regex": {
			"comment": ".",
			"match": ".",
			"name": "markup.italic.string.tmlanguage"
		},
		"character-type": {
			"match": "(?i)\\\\{2}([DHSW])|\\.",
			"name": "variable.other.enummember.tmlanguage"
		},
		"characters": {
			"comment": "\\a \\e \\f \\n \\r \\t \\v \\C-x \\M-x",
			"match": "\\\\{2}(?>[aefnrtv]|[CM]-x|M-\\\\C-x)",
			"name": "punctuation.definition.list.begin.markdown"
		},
		"unicode": {
			"comment": "\\777 \\xFF \\cZ \\x{13FFF} \\u0000 \\p{L}",
			"patterns": [
				{
					"match": "(\\\\{2})([0-7]{2,3})",
					"captures": {
						"1": { "name": "punctuation.definition.list.begin.markdown.tmlanguage" },
						"2": { "name": "constant.numeric.tmlanguage" }
					}
				},
				{
					"match": "(\\\\{2}x)(\\h{1,2})",
					"captures": {
						"1": { "name": "punctuation.definition.list.begin.markdown.tmlanguage" },
						"2": { "name": "constant.numeric.tmlanguage" }
					}
				},
				{
					"match": "(\\\\{2}x\\{)(1[0-3]\\h{4}|\\h{,5})(})",
					"captures": {
						"1": { "name": "meta.embedded.tmlanguage punctuation.definition.list.begin.markdown.tmlanguage" },
						"2": { "name": "constant.numeric.tmlanguage" },
						"3": { "name": "meta.embedded.tmlanguage punctuation.definition.list.begin.markdown.tmlanguage" }
					}
				},
				{
					"match": "(\\\\{2}c)(?>([a-zA-Z])|(.))",
					"captures": {
						"1": { "name": "punctuation.definition.list.begin.markdown.tmlanguage" },
						"2": { "name": "markup.bold.tmlanguage" },
						"3": { "name": "invalid.string.tmlanguage markup.underline.tmlanguage" }
					}
				},
				{
					"match": "(?>(\\\\{2}u)|(\\\\u))([^\"].{,3})",
					"captures": {
						"1": { "name": "punctuation.definition.list.begin.markdown.tmlanguage" },
						"2": { "name": "constant.character.escape.tmlanguage" },
						"3": {
							"patterns": [
								{ "match": "\\h+", "name": "constant.numeric.tmlanguage" },
								{ "match": "\\H+", "name": "invalid.string.tmlanguage markup.underline.tmlanguage" }
							]
						}
					}
				},
				{
					"match": "(\\\\{2}p{)([^}]+)(})?",
					"captures": {
						"1": { "name": "meta.embedded.tmlanguage punctuation.definition.list.begin.markdown.tmlanguage" },
						"2": {
							"patterns": [
								{
									"match": "(?i)(.*\\s(?<!\n).*)|(.*?)(Common|Arabic|Armenian|Bengali|Bopomofo|Braille|Buhid|Canadian_Aboriginal|Cherokee|Cyrillic|Devanagari|Ethiopic|Georgian|Greek|Gujarati|Gurmukhi|Han|Hangul|Hanunoo|Hebrew|Hiragana|Inherited|Kannada|Katakana|Khmer|Lao|Latin|Limbu|Malayalam|Mongolian|Myanmar|Ogham|Oriya|Runic|Sinhala|Syriac|Tagalog|Tagbanwa|TaiLe|Tamil|Telugu|Thaana|Thai|Tibetan|Yi|InBasic_Latin|InLatin-1_Supplement|InLatin_Extended-A|InLatin_Extended-B|InIPA_Extensions|InSpacing_Modifier_Letters|InCombining_Diacritical_Marks|InGreek_and_Coptic|InCyrillic|InCyrillic_Supplementary|InArmenian|InHebrew|InArabic|InSyriac|InThaana|InDevanagari|InBengali|InGurmukhi|InGujarati|InOriya|InTamil|InTelugu|InKannada|InMalayalam|InSinhala|InThai|InLao|InTibetan|InMyanmar|InGeorgian|InHangul_Jamo|InEthiopic|InCherokee|InUnified_Canadian_Aboriginal_Syllabics|InOgham|InRunic|InTagalog|InHanunoo|InBuhid|InTagbanwa|InKhmer|InMongolian|InLimbu|InTai_Le|InKhmer_Symbols|InPhonetic_Extensions|InLatin_Extended_Additional|InGreek_Extended|InGeneral_Punctuation|InSuperscripts_and_Subscripts|InCurrency_Symbols|InCombining_Diacritical_Marks_for_Symbols|InLetterlike_Symbols|InNumber_Forms|InArrows|InMathematical_Operators|InMiscellaneous_Technical|InControl_Pictures|InOptical_Character_Recognition|InEnclosed_Alphanumerics|InBox_Drawing|InBlock_Elements|InGeometric_Shapes|InMiscellaneous_Symbols|InDingbats|InMiscellaneous_Mathematical_Symbols-A|InSupplemental_Arrows-A|InBraille_Patterns|InSupplemental_Arrows-B|InMiscellaneous_Mathematical_Symbols-B|InSupplemental_Mathematical_Operators|InMiscellaneous_Symbols_and_Arrows|InCJK_Radicals_Supplement|InKangxi_Radicals|InIdeographic_Description_Characters|InCJK_Symbols_and_Punctuation|InHiragana|InKatakana|InBopomofo|InHangul_Compatibility_Jamo|InKanbun|InBopomofo_Extended|InKatakana_Phonetic_Extensions|InEnclosed_CJK_Letters_and_Months|InCJK_Compatibility|InCJK_Unified_Ideographs_Extension_A|InYijing_Hexagram_Symbols|InCJK_Unified_Ideographs|InYi_Syllables|InYi_Radicals|InHangul_Syllables|InHigh_Surrogates|InHigh_Private_Use_Surrogates|InLow_Surrogates|InPrivate_Use_Area|InCJK_Compatibility_Ideographs|InAlphabetic_Presentation_Forms|InArabic_Presentation_Forms-A|InVariation_Selectors|InCombining_Half_Marks|InCJK_Compatibility_Forms|InSmall_Form_Variants|InArabic_Presentation_Forms-B|InHalfwidth_and_Fullwidth_Forms|InSpecials|(?>(?>Lower|Upper|Title)case_|Cased_|Modifier_|Other_)?Letter|(?>Non_Spacing_|Spacing_Combining_|Enclosing_)?Mark|(?>Space_|Line_|Paragraph_)?Separator|(?>Math_|Currency_|Modifier_|Other_)?Symbol|(?>Decimal_Digit_|Letter_|Other_)?Number|(?>Dash_|Open_|Close_|Initial_|Final_|Connector_|Other_)?Punctuation|Other|Control|Format|Private_Use|Surrogate|Unassigned|L[lut&mo]?|M[nce]?|Z[slp]?|S[mcko]?|N[dlo]?|P[dseifco]?|C[cfosn]?)(.*)|(.+)",
									"captures": {
										"1": { "name": "invalid.string1.tmlanguage markup.underline.tmlanguage" },
										"2": { "name": "invalid.string2.tmlanguage markup.underline.tmlanguage" },
										"3": { "name": "variable.other.enummember.tmlanguage" },
										"4": { "name": "invalid.string3.tmlanguage markup.underline.tmlanguage" },
										"5": { "name": "invalid.string4.tmlanguage markup.underline.tmlanguage" }
									}
								}
							]
						},
						"3": { "name": "meta.embedded.tmlanguage punctuation.definition.list.begin.markdown.tmlanguage" }
					}
				}
			]
		},
		"subroutine": {
			"comment": "\\g<99> \\g'name'",
			"match": "(\\\\{2}g)(?>(<)([^>\"]*)(>)?|(')([^'\"]*)(')?)",
			"captures": {
				"1": { "name": "string.regexp.tmlanguage" },
				"2": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"3": { "patterns": [ {"include": "#capture-group-calling-name"} ] },
				"4": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"5": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
				"6": { "patterns": [ {"include": "#capture-group-calling-name"} ] },
				"7": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" }
			}
		},
		"backreference": {
			"patterns": [
				{
					"comment": "\\1",
					"match": "(\\\\{2})(\\d+)",
					"captures": {
						"1": { "name": "string.regexp.tmlanguage"	 },
						"2": { "name": "constant.numeric.tmlanguage" }
					}
				},
				{
					"comment": "\\k<99> \\k'name'",
					"match": "(\\\\{2}k)(?>(<)([^>\"]*)(>)?|(')([^'\"]*)(')?)",
					"captures": {
						"1": { "name": "string.regexp.tmlanguage" },
						"2": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
						"3": { "patterns": [ {"include": "#capture-group-calling-name"} ] },
						"4": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
						"5": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" },
						"6": { "patterns": [ {"include": "#capture-group-calling-name"} ] },
						"7": { "name": "meta.embedded.tmlanguage support.function.tmlanguage" }
					}
				}
			]
		},
		"quantifier": {
			"comment": "+ * ? {1,9}",
			"patterns": [
				{
					"match": "\\G[+*?]",
					"name": "invalid.tmlanguage markup.underline.tmlanguage"
				},
				{
					"match": "[+*?]",
					"name": "keyword.tmlanguage"
				},
				{
					"match": "\\G{(?>\\d+,?\\d*|,\\d+)}",
					"name": "invalid.tmlanguage markup.underline.tmlanguage"
				},
				{
					"match": "({)(?<number>\\d+)?(,)?((?(<number>)\\d*|\\d+))(})",
					"captures": {
						"1": { "name": "meta.embedded.tmlanguage keyword.tmlanguage" },
						"2": { "name": "constant.numeric.tmlanguage" },
						"3": { "name": "keyword.control.tmlanguage" },
						"4": { "name": "constant.numeric.tmlanguage" },
						"5": { "name": "meta.embedded.tmlanguage keyword.tmlanguage" }
					}
				}
			]
		},
		"anchor": {
			"comment": "$ ^ \\A \\B \\b \\G \\K \\Z \\z",
			"match": "[$^]|\\\\{2}[ABbGKZz]",
			"name": "variable.tmlanguage"
		},
		"alternation": {
			"comment": "|",
			"match": "\\|",
			"name": "keyword.other.operator.tmlanguage"
		},
		"regex": {
			"comment": ".",
			"match": ".",
			"name": "entity.name.label.tmlanguage strong.string.tmlanguage"
		},
		"invalid": {
			"comment": "\\ \/ \\. ) \"",
			"match": "\\\\(?>\\\\|(?=/))|(\\\\.|\\)|\")",
			"captures": {
				"0": { "name": "invalid.string.tmlanguage" },
				"1": { "name": "markup.underline.tmlanguage" }
			}
		},
		"test": {
			"match": "(?x){2,3}{2,3}({2,3}(?:{2,3})){2,3}[a-z&&]u°𐐷Ꚛ�𐀀𐃘[�𐃘] \\g<99> \\x555 QabcE $ \\$ \\111111111111111111111111111 a\bcde\fghijklm\nopq\rs\t\u0000vwxyz bfnrtu \\a\\b\\cZ\\d\\e\\f\\g<0>\\h\\i\\j\\k'0'\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u0000\\v\\w\\x\\y\\z ° ||| ABCDEFGHIJKLMNOPQRSTUVWXYZ `1234567890-=\\[]\\\\;',./ ~!@\\#$%^&*()_+{}|:\"<>? \\A\\B\\C\\D\\E\\F\\G\\H\\I\\J\\K\\L\\M\\N\\O\\P\\Q\\R\\S\\T\\U\\V\\W\\X\\Y\\Z \\x{201E} \\p{L} \\p{-LetterLaaLaa--LL--LL--} At aT Q.E q.e a$abc#comment\n (?-x) #comment\n/z",
			"name": "test.tmlanguage"
		}
	}
}